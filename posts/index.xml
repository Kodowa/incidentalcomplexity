<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Posts on Eve Documentation</title>
    <link>http://docs.witheve.com/posts/index.xml</link>
    <description>Recent content in Posts on Eve Documentation</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <atom:link href="http://docs.witheve.com/posts/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>A Declarative Clock in Eve</title>
      <link>http://docs.witheve.com/posts/2016-07-21-clock/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://docs.witheve.com/posts/2016-07-21-clock/</guid>
      <description>

&lt;p&gt;_This post has been updated. See the original &lt;a href=&#34;https://github.com/Kodowa/incidentalcomplexity/blob/5fbce96aecc7172166d130406e9e3c42bbbb27dc/_posts/2016-07-21-clock.md&#34;&gt;here&lt;/a&gt;._&lt;/p&gt;

&lt;p&gt;An analog clock is an obligatory example for reactive programming languages. It&amp;rsquo;s got all the right pieces: an event stream that changes over time, and a way to present those changes visually. Here is our version:&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;{{ site.url }}/images/eveclock.gif&#34; alt=&#34;A Clock in Eve&#34; /&gt;&lt;/p&gt;

&lt;p&gt;This clock is written in the Eve developer syntax, which is proposed in our first &lt;a href=&#34;https://github.com/witheve/rfcs/blob/master/proposed/syntax.md&#34;&gt;Request for Comments (RFC)&lt;/a&gt;. In this post, I&amp;rsquo;ll go through the code and explain how it works.&lt;/p&gt;

&lt;h3 id=&#34;eve-code&#34;&gt;Eve code&lt;/h3&gt;

&lt;p&gt;Eve code is written as a series of blocks, each of which can be thought of as operating in two phases:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Phase 1: Match&lt;/strong&gt; - select objects from the Eve DB by matching patterns&lt;br /&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Phase 2: Action&lt;/strong&gt; - change the Eve DB by either adding, setting, removing, or merging objects.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;The clock program consists of two blocks: the first generically defines a clock hand, while the second defines the drawing of the clock. Let&amp;rsquo;s focus on each block in turn.&lt;/p&gt;

&lt;h3 id=&#34;draw-a-clock-hand&#34;&gt;Draw a clock hand&lt;/h3&gt;

&lt;p&gt;First, we define how a clock hand is drawn. Although an analog clock has three hands, we can write code as if we&amp;rsquo;re drawing a single hand; Eve&amp;rsquo;s &lt;a href=&#34;https://github.com/witheve/rfcs/blob/master/proposed/syntax.md#set-semantics&#34;&gt;set semantics&lt;/a&gt; take care of drawing multiple hands, so no iterators like a &lt;code&gt;for&lt;/code&gt; statement are necessary.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;match

    // Select #clock-hands with angle and length attributes
    hand = [#clock-hand angle length]

    // Calculate coordinates for drawing a hand
    x2 = 50 + (length * sin[angle])
    y2 = 50 - (length * cos[angle])

// Bind tells Eve to update objects as values change
bind

    // Merge line coordinates into hand, tag it as a #line
    hand &amp;lt;- [#line, x1: 50, y1: 50, x2, y2]
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Blocks start with the &lt;code&gt;match&lt;/code&gt; phase, indicated by the &lt;code&gt;match&lt;/code&gt; fence. Within the &lt;a href=&#34;https://github.com/witheve/rfcs/blob/master/proposed/syntax.md#phase-1-match&#34;&gt;match&lt;/a&gt;, the programmer gathers all of the objects from the Eve DB needed to complete the block. Blocks only enter the &lt;code&gt;action&lt;/code&gt; phase if all supplied objects in the &lt;code&gt;match&lt;/code&gt; resolve against an object in the Eve DB.&lt;/p&gt;

&lt;p&gt;In the first line of the match, we encounter our first &lt;a href=&#34;https://github.com/witheve/rfcs/blob/master/proposed/syntax.md#objects&#34;&gt;object&lt;/a&gt;:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;hand = [#clock-hand angle length]
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Objects are a set of attribute:value pairs enclosed in square brackets. They ask Eve to find all the entities that fit the supplied attribute shape. The &lt;code&gt;hand&lt;/code&gt; object seen here is asking Eve to find every object &lt;a href=&#34;https://github.com/witheve/rfcs/blob/master/proposed/syntax.md#tag-selector---&#34;&gt;tagged&lt;/a&gt; &lt;code&gt;#clock-hand&lt;/code&gt; that also has the attributes &lt;code&gt;angle&lt;/code&gt; and &lt;code&gt;length&lt;/code&gt;. We use the &lt;code&gt;angle&lt;/code&gt; and &lt;code&gt;length&lt;/code&gt; attributes of this object to calculate two values, &lt;code&gt;x1&lt;/code&gt; and &lt;code&gt;y2&lt;/code&gt;, which we will use as coordinates for the lines that draw the clock hands.&lt;/p&gt;

&lt;p&gt;Now we enter the &lt;a href=&#34;https://github.com/witheve/rfcs/blob/master/proposed/syntax.md#phase-2-action&#34;&gt;action phase&lt;/a&gt; of the query, indicated by the use of the &lt;code&gt;bind&lt;/code&gt; fence (one of two fences applicable to the &lt;code&gt;action&lt;/code&gt; phase). The &lt;code&gt;bind&lt;/code&gt; fence says that we are finished reading from the Eve DB, and now we are ready to write to it. The use of the &lt;code&gt;bind&lt;/code&gt; fence in particular says that as the objects in the &lt;code&gt;match&lt;/code&gt; change, Eve will keep their dependant objects up-to-date.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;hand &amp;lt;- [#line, x1: 50, y1: 50, x2, y2]
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Here, we use the merge operator &lt;code&gt;&amp;lt;-&lt;/code&gt;, one of four &lt;a href=&#34;https://github.com/witheve/rfcs/blob/master/proposed/syntax.md#action-operators&#34;&gt;action operators&lt;/a&gt;. The merge operator merges one object with another. In this case, we are merging the object &lt;code&gt;[#line, x1: 50, y1: 50, x2, y2]&lt;/code&gt; into the &lt;code&gt;hand&lt;/code&gt; object. This means that every &lt;code&gt;#clock-hand&lt;/code&gt; with &lt;code&gt;angle&lt;/code&gt; and &lt;code&gt;length&lt;/code&gt; attributes also has a &lt;code&gt;#line&lt;/code&gt; tag, as well as &lt;code&gt;x1&lt;/code&gt;, &lt;code&gt;x2&lt;/code&gt;, &lt;code&gt;y1&lt;/code&gt;, and &lt;code&gt;y2&lt;/code&gt; attributes.&lt;/p&gt;

&lt;p&gt;That&amp;rsquo;s all this block does: it selects every &lt;code&gt;[#clock-hand angle length]&lt;/code&gt;, and tags each one as a &lt;code&gt;#line&lt;/code&gt;, which Eve knows how to draw using &lt;code&gt;x1&lt;/code&gt;, &lt;code&gt;x2&lt;/code&gt;, &lt;code&gt;y1&lt;/code&gt;, and &lt;code&gt;y2&lt;/code&gt;. Let&amp;rsquo;s see how that&amp;rsquo;s done.&lt;/p&gt;

&lt;h3 id=&#34;draw-a-clock&#34;&gt;Draw a clock&lt;/h3&gt;

&lt;p&gt;In this block, we define the clock using a face drawn as a circle, and three &lt;code&gt;#clock-hands&lt;/code&gt; drawn as lines.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;match

    // Select the current time
    [#time hours minutes seconds]

// Update the SVG as the time changes
bind

    // Add an SVG element to the root of the DOM       
    [#svg viewBox: &amp;quot;0 0 100 100&amp;quot;, width: &amp;quot;300px&amp;quot;, children:

        // Add a clock face at (50,50) with radius 45.
        [#circle cx: 50, cy: 50, r: 45, fill: &amp;quot;#0B79CE&amp;quot;]

        // Add the hours hand    
        [#clock-hand @hour-hand angle: 30 * hours, length: 30, stroke: &amp;quot;#023963&amp;quot;]

        // Add the minutes hand 
        [#clock-hand @minute-hand angle: 6 * minutes, length: 40, stroke: &amp;quot;#023963&amp;quot;]

        // Add the seconds hand 
        [#clock-hand @second-hand angle: 6 * seconds, length: 40, stroke: &amp;quot;#ce0b46&amp;quot;]]
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This block (as with all blocks) follows the familiar match -&amp;gt; action pattern. For this block&amp;rsquo;s match, we select the current time, represented by the &lt;code&gt;#time&lt;/code&gt; object; and its attributes &lt;code&gt;hours&lt;/code&gt;, &lt;code&gt;minutes&lt;/code&gt;, and &lt;code&gt;seconds&lt;/code&gt;. This object is just like any other, but under the covers Eve keeps it up to date as the system clock changes.&lt;/p&gt;

&lt;p&gt;Again we use the &lt;code&gt;bind&lt;/code&gt; fence, because we want Eve to update the clock drawing as the time changes. Behind the &lt;code&gt;bind&lt;/code&gt; fence, we add an SVG element:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;[#svg viewBox: &amp;quot;0 0 100 100&amp;quot;, width: &amp;quot;300px&amp;quot;, children: ... ]
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Since no parent is specified, the SVG element will be rendered as a child of the DOM root. Next, we add the clock elements as children of the SVG element. We add the clock face (a blue circle with a center at (50, 50) with radius 45):&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;[#circle cx: 50, cy: 50, r: 45, fill: &amp;quot;#0B79CE&amp;quot;] 
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;and three hands:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;[#clock-hand @hour-hand angle: 30 * hours, length: 30, stroke: &amp;quot;#023963&amp;quot;]
[#clock-hand @minute-hand angle: 6 * minutes, length: 40, stroke: &amp;quot;#023963&amp;quot;]
[#clock-hand @second-hand angle: 6 * seconds, length: 40, stroke: &amp;quot;#ce0b46&amp;quot;]
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Now we can see how this block ties back to the first one; the objects representing the hands of the clock are tagged &lt;code&gt;#clock-hand&lt;/code&gt; and have &lt;code&gt;angle&lt;/code&gt; and &lt;code&gt;length&lt;/code&gt; attributes. This is exactly the pattern we were matching against in the first block! Thus, the loop is completed, and the clock hands are drawn as lines based on the current time as an angle.&lt;/p&gt;

&lt;h3 id=&#34;try-it-yourself&#34;&gt;Try it yourself!&lt;/h3&gt;

&lt;p&gt;You can download Eve and try the clock yourself! The easiest way is to use our docker container:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;docker pull witheve/eve
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;You can also download the Eve source and build it yourself (Linux and OSX only for now):&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;git clone https://github.com/witheve/Eve.git
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Instructions to build are available on the &lt;a href=&#34;https://github.com/witheve/Eve&#34;&gt;witheve/eve repository&lt;/a&gt;.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Breaking Down: Tic-Tac-Toe</title>
      <link>http://docs.witheve.com/posts/2016-08-11-tic-tac-toe/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://docs.witheve.com/posts/2016-08-11-tic-tac-toe/</guid>
      <description>

&lt;p&gt;_(Editor&amp;rsquo;s Note: Keep in mind as you&amp;rsquo;re reading, this post is an executable Eve program. See the raw text &lt;a href=&#34;https://raw.githubusercontent.com/Kodowa/incidentalcomplexity/gh-pages/_posts/2016-08-11-tic-tac-toe.md&#34;&gt;here&lt;/a&gt;. This is our first example of &lt;a href=&#34;https://github.com/witheve/rfcs/blob/master/proposed/syntax.md#program-structure&#34;&gt;literate programming&lt;/a&gt; in Eve, so let us know what you think!)_&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;{{ site.url }}/images/tic-tac-toe.gif&#34; alt=&#34;Tic-tac-toe in Eve&#34; /&gt;
{% raw %}
Last week on the mailing list, &lt;a href=&#34;https://github.com/rubensandwich&#34;&gt;RubenSandwich&lt;/a&gt; posted an interactive demo capable of &lt;a href=&#34;https://groups.google.com/forum/?utm_medium=email&amp;amp;utm_source=footer#!topic/eve-talk/UQkW7KDdz3M&#34;&gt;playing and scoring tic-tac-toe matches&lt;/a&gt;. He provided some great feedback about the issues he ran into along the way. Now that the language is becoming more stable, our first priority is seeing it used and addressing the problems that surface. To that end, his troubles became our guide to making Eve a little friendlier for writing interactive applications in general. Today we&amp;rsquo;ll look at a simplified version of tic-tac-toe that takes into account his feedback.&lt;/p&gt;

&lt;p&gt;This analysis (and future breakdowns) will be written inline in Eve to make the discussion flow more naturally. Since Eve is a superset of &lt;a href=&#34;https://guides.github.com/features/mastering-markdown/&#34;&gt;GitHub-Flavored Markdown&lt;/a&gt; which our blog is capable of rendering, we can provide a pleasant reading experience directly from the source code.&lt;/p&gt;

&lt;h3 id=&#34;game-logic&#34;&gt;Game logic&lt;/h3&gt;

&lt;p&gt;Tic-Tac-Toe is a classic game played by two players, &amp;ldquo;X&amp;rdquo; and &amp;ldquo;O&amp;rdquo;, who take turns marking their letter on a 3x3 grid. The first player to mark 3 adjacent cells in a line wins. The game can potentially result in a draw, where all grid cells are marked, but neither player has 3 adjacent cells. To build this game in Eve, we need several parts:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;A game board with cells&lt;/li&gt;
&lt;li&gt;A way to mark a cell as &amp;ldquo;X&amp;rdquo; or &amp;ldquo;O&amp;rdquo;&lt;/li&gt;
&lt;li&gt;A way to recognize that a player has won the game.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;To begin, we initialize the board. We commit an object named &lt;code&gt;@board&lt;/code&gt; to hold our global state and create a set of &lt;code&gt;#cell&lt;/code&gt;s. These &lt;code&gt;#cell&lt;/code&gt;s will keep track of the moves players have made. Common connect-N games (a generalized tic-tac-toe for any NxN grid) are scored along 4 axes (horizontal, vertical, the diagonal, and the anti-diagonal). We group cells together along each axis up front to make scoring easier later. This process is made much cleaner by the addition of new math expressions like &lt;code&gt;range[from, to]&lt;/code&gt;. This is a small part of our effort to expand the standard library based on usage. If you&amp;rsquo;re interested in helping shape this, stop by our &lt;a href=&#34;https://github.com/witheve/rfcs/&#34;&gt;RFCs repository&lt;/a&gt; or jump right in on our discussion of &lt;a href=&#34;https://github.com/witheve/rfcs/issues/5&#34;&gt;standard string expressions&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;The game board is square, with a given &lt;code&gt;size&lt;/code&gt;. It contains &lt;code&gt;size ^ 2&lt;/code&gt; cells,
each with a row and column index.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;  match
    [#session-connect]

    // board constants
    size = 3
    starting-player = &amp;quot;X&amp;quot;

    // generate the cells
    i = range[from: 0, to: size]
    j = range[from: 0, to: size]

 commit
    board = [@board size player: starting-player]
    [#cell board row: i column: j]
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;A subtlety here is the last line, &lt;code&gt;[#cell board row: i column: j]&lt;/code&gt;. Thanks to our relational semantics, this line actually generates all 9 cells. Since the sets of values computed in &lt;code&gt;i&lt;/code&gt; and &lt;code&gt;j&lt;/code&gt; have no relation to each other, when we use them together we get the &lt;a href=&#34;https://en.wikipedia.org/wiki/Cartesian_product&#34;&gt;cartesian product&lt;/a&gt; of their values. This means that if &lt;code&gt;i = {0, 1, 2}&lt;/code&gt; and &lt;code&gt;j = {0, 1, 2}&lt;/code&gt;, then &lt;code&gt;i x j = {(0, 0), (0, 1), ... (2, 1), (2, 2)}&lt;/code&gt;. These are exactly the indices we need for our grid!&lt;/p&gt;

&lt;p&gt;Now we tag some special cell groupings: diagonal and anti-diagonal cells. The diagonal cells are (0, 0), (1, 1), and (2, 2). Notice anything about them?&lt;/p&gt;

&lt;p&gt;Diagonal cells have a row index equal to its column index&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;  match
    cells = [#cell row column]
    row = column
  bind
    cells += #diagonal
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Similarly, the anti-diagonal cells are (0, 2), (1, 1), and (2, 0).&lt;/p&gt;

&lt;p&gt;Anti-diagonal cells satisfy the equation &lt;code&gt;row + col = N - 1&lt;/code&gt;,
where N is the size of the board.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;  match
    cells = [#cell row column]
    [@board size: N]
    row + column = N - 1
  bind
    cells += #anti-diagonal
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;A game is won when a player marks N cells in a row, column, or diagonal.
The game can end in a tie, where no player has N in a row.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;  match
    board = [@board size: N, not(winner)]
                     // Check for a winning row
    (winner, cell) = if cell = [#cell row player]
                       N = count[given: cell, per: (row, player)] then (player, cell)
                     // Check for a winning column
                     else if cell = [#cell column player]
                       N = count[given: cell, per: (column, player)] then (player, cell)
                     // Check for a diagonal win
                     else if cell = [#diagonal row column player]
                       N = count[given: cell, per: player] then (player, cell)
                     // Check for an anti-diagonal win
                     else if cell = [#anti-diagonal row column player]
                       N = count[given: cell, per: player] then (player, cell)
                     // If all cells are filled but there are no winners
                     else if cell = [#cell player]
                       N * N = count[given: cell] then (&amp;quot;nobody&amp;quot;, cell)
  commit
    board.winner := winner
    cell += #winner
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;We use the &lt;code&gt;count&lt;/code&gt; aggregate in the above block. Count returns the number of discrete values (the cardinality) of the variables in &lt;code&gt;given&lt;/code&gt;. The optional &lt;code&gt;per&lt;/code&gt; attribute allows you to specify groupings, which yield one result for each set of values in the group.&lt;/p&gt;

&lt;p&gt;For example, in &lt;code&gt;count[given: cell, per: player]&lt;/code&gt; we group by &lt;code&gt;player&lt;/code&gt;, which returns two values: the count of cells marked by player &lt;code&gt;X&lt;/code&gt; and those marked by &lt;code&gt;O&lt;/code&gt;. This can be read &amp;ldquo;count the cells per player&amp;rdquo;. In the scoring block, we group by &lt;code&gt;column&lt;/code&gt; and &lt;code&gt;player&lt;/code&gt;. This will return the count of cells marked by a player in a particular column. Like wise with the row case. By equating this with N, we ensure the winning player is only returned when she has marked N cells in the given direction.&lt;/p&gt;

&lt;p&gt;This is how Eve works without looping. Rather than writing a nested &lt;code&gt;for&lt;/code&gt; loop and iterating over the cells, we can use Eve&amp;rsquo;s semantics to our advantage.&lt;/p&gt;

&lt;p&gt;We first search every row, then every column. Finally we check the diagonal and anti-diagonal. To do this, we leverage the &lt;code&gt;#diagonal&lt;/code&gt; and &lt;code&gt;#anti-diagonal&lt;/code&gt; tags we created earlier; instead of selecting &lt;code&gt;[#cell]&lt;/code&gt;, we can select on &lt;code&gt;[#diagonal]&lt;/code&gt; and &lt;code&gt;[#anti-diagonal]&lt;/code&gt; to select only a subset of cells.&lt;/p&gt;

&lt;h3 id=&#34;react-to-events&#34;&gt;React to Events&lt;/h3&gt;

&lt;p&gt;Next, we handle user input. Any time a cell is directly clicked, we:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Ensure the cell hasn&amp;rsquo;t already been played&lt;/li&gt;
&lt;li&gt;Check for a winner&lt;/li&gt;
&lt;li&gt;Switch to the next player&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Then update the cell to reflect its new owner, and switch board&amp;rsquo;s &lt;code&gt;player&lt;/code&gt; to the next player.&lt;/p&gt;

&lt;p&gt;Click on a cell to make your move&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;  match
    [#click #direct-target element: [#div cell]]
    not(cell.player)                               // Ensures the cell hasn&#39;t been played
    board = [@board player: current, not(winner)]  // Ensures the game has not been won
    next_player = if current = &amp;quot;X&amp;quot; then &amp;quot;O&amp;quot;        // Switches to the next player
                  else &amp;quot;X&amp;quot;
  commit
    board.player := next_player
    cell.player := current
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Since games of tic-tac-toe are often very short and extremely competitive, it&amp;rsquo;s imperative that it be quick and easy to begin a new match. When the game is over (the board has a &lt;code&gt;winner&lt;/code&gt; attribute), a click anywhere on the drawing area will reset the game for another round of play.&lt;/p&gt;

&lt;p&gt;A reset consists of:
- Clearing the board of a &lt;code&gt;winner&lt;/code&gt;
- Clearing all of the cells
- Removing the &lt;code&gt;#winner&lt;/code&gt; tag from the winning cell set&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;  match
    [#click #direct-target]
    board = [@board winner]
    cell = [#cell player]
  commit
    board.winner -= winner
    cell.player -= player
    cell -= #winner
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;drawing-the-game-board&#34;&gt;Drawing the Game Board&lt;/h3&gt;

&lt;p&gt;We&amp;rsquo;ve implemented the game logic, but now we need to actually draw the board so players have something to see and interact with. Our general strategy will be that the game board is a &lt;code&gt;#div&lt;/code&gt; with one child &lt;code&gt;#div&lt;/code&gt; for each cell. Each cell will be drawn with an &amp;ldquo;X&amp;rdquo;, &amp;ldquo;O&amp;rdquo;, or empty string as text. We also add a &lt;code&gt;#status&lt;/code&gt; div, which we&amp;rsquo;ll write game state into later. Our cells have the CSS inlined, but you could just as easily link to an external file.&lt;/p&gt;

&lt;p&gt;Draw the board&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;  match
    board = [@board]
    cell = [#cell board row column]
    contents = if cell.player then cell.player
              else &amp;quot;&amp;quot;
  bind
    [#div board @container style: [font-family: &amp;quot;sans-serif&amp;quot;], children:
      [#div #status board class: &amp;quot;status&amp;quot;, style: [text-align: &amp;quot;center&amp;quot;, width: 150, padding-bottom: 10]]
      [#div class: &amp;quot;board&amp;quot; style: [color: &amp;quot;black&amp;quot;] children:
        [#div class: &amp;quot;row&amp;quot; sort: row children:
          [#div #cell class: &amp;quot;cell&amp;quot; cell text: contents sort: column style:
            [display: &amp;quot;inline-block&amp;quot; width: &amp;quot;50px&amp;quot; height: &amp;quot;50px&amp;quot; border: &amp;quot;1px solid black&amp;quot; background: &amp;quot;white&amp;quot; font-size: &amp;quot;2em&amp;quot; line-height: &amp;quot;50px&amp;quot; text-align: &amp;quot;center&amp;quot;]]]]
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Winning cells are drawn in a different color&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;  match
    winning-cells = [#cell #winner]
    cell-elements = [#div cell: winning-cells, style]
  bind
    style.color := &amp;quot;red&amp;quot;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Finally, we fill the previously mentioned &lt;code&gt;#status&lt;/code&gt; div with our current game state. If no winner has been declared, we remind the competitors of whose turn it is, and once a winner is found we announce her newly-acquired bragging rights.&lt;/p&gt;

&lt;p&gt;Display the current player if the game isn&amp;rsquo;t won&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;  match
    status = [#status board]
    not(board.winner)
  bind
    status.text += &amp;quot;It&#39;s {{board.player}}&#39;s turn!&amp;quot;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;When the game is won, display the winner&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;  match
    status = [#status board]
    winner = board.winner
  bind
    status.text += &amp;quot;{{winner}} wins! Click anywhere to restart!&amp;quot;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Along the way to making this demo, many new standard library expressions were added, the execution strategy for aggregates was overhauled, parser bugs were fixed, and dependency ordering glitches resolved. We even began to appreciate how literate programming will work in Eve (the post you are reading right now is an executable Eve program).&lt;/p&gt;

&lt;p&gt;The human-compiled version of tic-tac-toe was completed in only about half an hour, and required very few changes to get working once the platform caught up. The latest iteration of Eve is still very much in its infancy, but even now its showing a lot of promise for teasing out simple and general solutions to complicated problems. As one of its creators, I&amp;rsquo;m obviously a biased party when discussing Eve, so feedback such as RubenSandwich&amp;rsquo;s is invaluable in helping us make the language more robust. If you find the time to try Eve yourself, please don&amp;rsquo;t hesitate to share your experiences with us on the &lt;a href=&#34;https://groups.google.com/forum/?utm_medium=email&amp;amp;utm_source=footer#!forum/eve-talk&#34;&gt;mailing list&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;{% endraw %}&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Community Spotlight: Eve on a PocketCHIP</title>
      <link>http://docs.witheve.com/posts/2016-07-12-pocketchip/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://docs.witheve.com/posts/2016-07-12-pocketchip/</guid>
      <description>&lt;p&gt;In our &lt;a href=&#34;http://incidentalcomplexity.com/2016/06/30/apr/&#34;&gt;latest Dev Diary&lt;/a&gt;, we showed off the latest Eve REPL. Well, not too long after, &lt;a href=&#34;https://twitter.com/markrhacker1&#34;&gt;Mark R. Hacker&lt;/a&gt; managed to get Eve and the REPL running on his PocketCHIP.&lt;/p&gt;

&lt;p&gt;&lt;blockquote class=&#34;twitter-tweet&#34; data-lang=&#34;en&#34;&gt;
  &lt;p lang=&#34;en&#34; dir=&#34;ltr&#34;&gt;
    &lt;a href=&#34;https://twitter.com/nextthingco&#34;&gt;@nextthingco&lt;/a&gt;
    &lt;a href=&#34;https://twitter.com/hashtag/PocketCHIP?src=hash&#34;&gt;#PocketCHIP&lt;/a&gt;
    &lt;a href=&#34;https://twitter.com/ibdknox&#34;&gt;@ibdknox&lt;/a&gt;
    &lt;a href=&#34;https://twitter.com/with_eve&#34;&gt;@with_eve&lt;/a&gt;
    &lt;br&gt;
    Eve running on my PocketChip. :-)
    &lt;a href=&#34;https://t.co/snLogzeRbS&#34;&gt;pic.twitter.com/snLogzeRbS&lt;/a&gt;
  &lt;/p&gt;
  &amp;mdash; Mark Robert Hacker (@MarkRHacker1)
  &lt;a href=&#34;https://twitter.com/MarkRHacker1/status/751147433997004800&#34;&gt;July 7, 2016&lt;/a&gt;
&lt;/blockquote&gt;
&lt;script async src=&#34;//platform.twitter.com/widgets.js&#34; charset=&#34;utf-8&#34;&gt;
&lt;/script&gt;&lt;/p&gt;

&lt;p&gt;Check it out!&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;{{ site.url }}/images/pocketchip1.jpg&#34; alt=&#34;EvePocketChip&#34; /&gt;&lt;/p&gt;

&lt;p&gt;(image courtesy Mark R. Hacker)&lt;/p&gt;

&lt;p&gt;I wasn&amp;rsquo;t very familiar with this device before now, but apparently it&amp;rsquo;s an ultra-low-cost computer akin to the Raspberry Pi. The CHIP sports a 1GHz SOC, and 512 MB of RAM, so it&amp;rsquo;s not exactly an anemic machine. Still, it&amp;rsquo;s the weakest machine to ever run Eve, and to my knowledge, this represents the first time that Eve has been compiled to ARM. Mark reports that since the CHIP runs Debian, all he had to do was follow the standard build instructions to compile natively to ARM on the device. However, he noted that starting Eve actually took 10 minutes, so you need some patience. Despite this, Mark reports that the REPL runs fine in the Iceweasel browser.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;{{ site.url }}/images/pocketchip3.jpg&#34; alt=&#34;EvePocketChip&#34; /&gt;&lt;/p&gt;

&lt;p&gt;(image courtesy Mark R. Hacker)&lt;/p&gt;

&lt;p&gt;Mark is currently working on getting the newest version of Eve working on his PocketCHIP, so we&amp;rsquo;ll check back with him later for an update on his progress.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Dev Diary (August 2016)</title>
      <link>http://docs.witheve.com/posts/2016-08-31-august/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://docs.witheve.com/posts/2016-08-31-august/</guid>
      <description>

&lt;p&gt;&lt;em&gt;This post has been updated. See the original &lt;a href=&#34;https://github.com/Kodowa/incidentalcomplexity/blob/6d461b59f7530ade2225a24f8bcc01b4eb1d8fc9/_posts/2016-08-31-august.md&#34;&gt;here&lt;/a&gt;&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;&lt;em&gt;(Eve is a new programming language, and this is our development blog. If you&amp;rsquo;re new to Eve, &lt;a href=&#34;https://github.com/witheve/Eve&#34;&gt;start here&lt;/a&gt;)&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;The majority of August was spent adding language features, fixing bugs, writing documentation, and listening/responding to community feedback. We did a lot this month, so this update is going to be a long one.&lt;/p&gt;

&lt;h3 id=&#34;platform&#34;&gt;Platform&lt;/h3&gt;

&lt;p&gt;The Eve platform saw rapid improvements over the last month as we quickly responded to user feedback. As is the case when all projects are set loose in the wild, we encountered stability, performance, and usability concerns almost immediately. Let&amp;rsquo;s take a look at all of the work put into the Eve platform first.&lt;/p&gt;

&lt;h4 id=&#34;word-choice-adjustments&#34;&gt;Word Choice Adjustments&lt;/h4&gt;

&lt;p&gt;Surprisingly, one of the most difficult aspects of developing a language is deciding on the words and verbiage used to describe Eve concepts. Choosing the wrong words can alienate users and make things more confusing than they need to be. Therefore, we&amp;rsquo;ve spent countless hours looking through thesauruses and dictionaries for the perfect words. In presenting the language to new users, we&amp;rsquo;ve learned some of the choices that made sense to us didn&amp;rsquo;t make sense to others. For instance, we used to talk about &amp;ldquo;freezing&amp;rdquo;, but community feedback suggested that word didn&amp;rsquo;t provide an intuition for how that command actually worked.&lt;/p&gt;

&lt;p&gt;For anyone following our development, but not following the &lt;a href=&#34;https://github.com/witheve/rfcs/issues/4&#34;&gt;Syntax RFC discussion&lt;/a&gt;, we&amp;rsquo;ve made the following adjustments to how we talk about Eve:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;freeze   -&amp;gt; commit
maintain -&amp;gt; bind
object   -&amp;gt; record
bag      -&amp;gt; database
&lt;/code&gt;&lt;/pre&gt;

&lt;h4 id=&#34;new-function-syntax&#34;&gt;New Function Syntax&lt;/h4&gt;

&lt;p&gt;Whereas most languages use functions to accomplish code-reuse, Eve takes a different route; our records obviate the need for most functions. Therefore, we don&amp;rsquo;t fully support user defined functions at the moment. Nonetheless, functions are useful for primitive operations, like math or string manipulation. Thus, we adjusted our function syntax to look a little more like the record syntax.&lt;/p&gt;

&lt;p&gt;Let&amp;rsquo;s look at the sine function:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;y = sin[degrees: 90]
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The first thing to notice are the square brackets. These are reminiscent of the record syntax, which also uses square brackets. That&amp;rsquo;s because a function call is really just sugar for:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;[@sin #function degrees: 90 value]
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;which is a record like any other. The new function syntax uses the &lt;code&gt;value&lt;/code&gt; attribute as an
implicit return, so functions can be inlined into expressions.&lt;/p&gt;

&lt;p&gt;The second thing to notice is that arguments are explicitly defined at the call site. This has several nice properties. First, it makes code more readable and self-documenting; any reader of the program unfamiliar with the function arguments can read them where the function is called, without having to look up documentation. Second, explicit arguments allow a nice mechanism to provide alternative arguments. For instance, we could use the sine function with a radian input:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;y = sin[radians: angle]
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The reader of this program doesn&amp;rsquo;t need to guess if the input is radians or degrees. One interesting thing you can do with this is add custom arguments to existing functions. In this example, we create a new coordinate system that takes angles in “fun-degrees”:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt; match
    return = sin[angle: value? / 2 + 30]
 bind
    sin[fun-degrees: value?, return]
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;And then we can use the new argument the same way we use the default arguments:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt; match
    answer = sin[fun-degrees: 40]
 bind
    [#div text: answer]
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Finally, this syntax allows for optional arguments. For instance, in the case of &lt;code&gt;count&lt;/code&gt;, the &lt;code&gt;per&lt;/code&gt; argument is optional. So we can use count in the following ways:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;y = count[given: students]
y = count[given: students, per: grade]
&lt;/code&gt;&lt;/pre&gt;

&lt;h4 id=&#34;databases&#34;&gt;Databases&lt;/h4&gt;

&lt;p&gt;We&amp;rsquo;ve started thinking more about how modularity will work in Eve. For a while now, we&amp;rsquo;ve had a concept of &amp;ldquo;databases&amp;rdquo; (formerly bags), which are just containers of facts. So far, we&amp;rsquo;ve only exposed two databases: a default &amp;ldquo;session&amp;rdquo; database and a &amp;ldquo;global&amp;rdquo; database. The global database was exposed to users via &lt;code&gt;commit global&lt;/code&gt;, which directed committed records to a global database accessible by any session on the server.&lt;/p&gt;

&lt;p&gt;In the &lt;a href=&#34;https://github.com/witheve/Eve/tree/modularity&#34;&gt;modularity branch&lt;/a&gt;, we&amp;rsquo;ve opened up the ability to send facts to and select facts from specific databases. For instance, until now a committed &lt;code&gt;#div&lt;/code&gt; was implicitly directed to a special browser database. Now, if you want to render something in the browser you&amp;rsquo;ll have to tell Eve to put it there explicitly:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;commit @browser
  [#div text: &amp;quot;some text&amp;quot;]
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Databases are specified after one of the three actions: &lt;code&gt;match&lt;/code&gt;, &lt;code&gt;commit&lt;/code&gt;, or &lt;code&gt;bind&lt;/code&gt;. If no database is specified, the database is implicitly a default session database. You can even work with multiple databases at once:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;match (@my-database, @your-database)
  [#person name]
bind
  [#div text: {{name}}]
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This would select every &lt;code&gt;#person&lt;/code&gt; from two different databases, essentially merging two databases.&lt;/p&gt;

&lt;p&gt;With this mechanism in place, we can start to talk about how modularity and libraries will work in Eve. For instance, I could create a custom math library, and what I would distribute is a database. Then anyone who wants to use my custom math would do the following:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;match @custom-math-lib
  ...
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;We still have a lot of work to do here, so this feature is not available on the master branch yet. Stay tuned for an RFC coming next month on modularity.&lt;/p&gt;

&lt;h4 id=&#34;talking-with-the-outside-world&#34;&gt;Talking with the outside world&lt;/h4&gt;

&lt;p&gt;Eve cannot thrive in isolation, so we need a way to communicate with the outside world. We&amp;rsquo;ve done some work on this front, adding the ability to read/write files, handle JSON (opening up the ability to interact with any JSON compatible API), and handle HTTP requests. This work is available in the &lt;a href=&#34;https://github.com/witheve/Eve/tree/process&#34;&gt;process branch&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;What&amp;rsquo;s nice about our solution here is that interacting with the outside world doesn&amp;rsquo;t look or feel any different than interacting exclusively within Eve; you still match and modify records, except the facts in those records originate from external sources. If you&amp;rsquo;ve been using Eve, then you&amp;rsquo;re already interacting with the browser through changing the DOM and handling events like clicks and keypresses.&lt;/p&gt;

&lt;p&gt;Eric has been working on a little &lt;a href=&#34;https://github.com/witheve/Eve/blob/5b49dbbb0b6d02a305a1efeebc39923239627634/examples/http-server.eve&#34;&gt;HTTP file server&lt;/a&gt; written in Eve. It&amp;rsquo;s still a work in progress, but the functionality to accept requests and serve files is already in place. Take a look at how an HTTP request is handled:&lt;/p&gt;

&lt;p&gt;Start path resolution&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;  match
     r = [#http-request]
     split[text: r.request.url, token, index, by: &amp;quot;/&amp;quot;]
     fr = [#root]
  bind
     [#path index: 1, file: fr]
     [#path index token]
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Resolve a path&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;match
    [#path index: pindex, file: pfile]
    f = pfile.child
    child = [#path index: (pindex + 1), token: f.name]
bind
    child.file := f
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;After some more work to determine the requested file is available, then we can send a response:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;match
    r = [#request-object extension file connection]
    ct = [#content-type suffix: extension]
commit
  connection.response := [
      content: file.contents
      status: &amp;quot;200&amp;quot;
      reason: &amp;quot;OK&amp;quot;
      header: [Content-Type:ct.type]]
  r := none
bind 
  r.completed := true
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;You&amp;rsquo;ll see here that we are interacting with both an external &lt;code&gt;#http-request&lt;/code&gt;, and the file system through &lt;code&gt;#path&lt;/code&gt;. Again, what&amp;rsquo;s notable is that despite interacting with data external to Eve, the code is written as if you were working entirely within the boundaries of Eve. You can check out the &lt;a href=&#34;https://github.com/witheve/Eve/blob/5b49dbbb0b6d02a305a1efeebc39923239627634/examples/http-server.eve&#34;&gt;full program&lt;/a&gt; to see the rest of the implementation details.&lt;/p&gt;

&lt;h4 id=&#34;syntax-highlighting&#34;&gt;Syntax Highlighting&lt;/h4&gt;

&lt;p&gt;We added syntax highlighting to the built-in editor!&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;{{ site.url }}/images/syntax-highlighting.png&#34; alt=&#34;Eve Syntax Highlighting&#34; /&gt;&lt;/p&gt;

&lt;h4 id=&#34;eve-and-markdown&#34;&gt;Eve and Markdown&lt;/h4&gt;

&lt;p&gt;One key feature of the Eve programming model is that the order of statements doesn&amp;rsquo;t matter. A nice implication of this property is that we can write Eve code in an order that makes sense for a human, as opposed to writing code in an order that is imposed by the compiler or runtime. This idea is the basis for &lt;a href=&#34;https://en.wikipedia.org/wiki/Literate_programming&#34;&gt;literate programming&lt;/a&gt;, a practice for writing programs introduced by Donald Knuth in 1981. The idea behind literate programming is to treat a program as a document of prose written to a human audience, with code interspersed throughout. In writing this way, a programmer can use prose and formal methods to reinforce one another, leading to programs that are (in principle) easier to maintain. We talk about some of the benefits of literate programming &lt;a href=&#34;https://github.com/witheve/rfcs/blob/master/proposed/syntax.md#program-structure&#34;&gt;here&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;{{ site.url }}/images/EveMD.png&#34; alt=&#34;Eve Syntax Highlighting&#34; /&gt;&lt;/p&gt;

&lt;p&gt;Whereas other literate programming implementations require a &amp;ldquo;tangle&amp;rdquo; step to turn a literate program into a compilable program, Eve&amp;rsquo;s semantics mean a &lt;code&gt;*.eve&lt;/code&gt; file can be rendered as markdown or executed by Eve without any additional compilation steps. We accomplish this by being &lt;a href=&#34;http://commonmark.org/&#34;&gt;CommonMark&lt;/a&gt; compatible; Eve programs are written just as you would write any markdown document, but code blocks containing Eve code are actually executable.&lt;/p&gt;

&lt;p&gt;We&amp;rsquo;ve written a few literate programs this way. If you follow our blog, you&amp;rsquo;ve already seen some of them:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://incidentalcomplexity.com/2016/08/11/tic-tac-toe/&#34;&gt;Tic-Tac-Toe&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://incidentalcomplexity.com/2016/08/19/todoMVC/&#34;&gt;TodoMVC&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://incidentalcomplexity.com/2016/08/23/flappy-eve/&#34;&gt;FlappyBird&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Each of these blog posts are executable Eve programs &amp;ldquo;as-is&amp;rdquo;; just send them through the Eve compiler and they&amp;rsquo;ll run. As Eve grows, we hope more people will join us in practicing literate programming, but there&amp;rsquo;s nothing about Eve that demands writing code this way; you can write programs with as little or as much prose as you prefer.&lt;/p&gt;

&lt;h4 id=&#34;views&#34;&gt;Views&lt;/h4&gt;

&lt;p&gt;We&amp;rsquo;ve been thinking a lot about what kind of graphical tools would be useful for working with the textual version of Eve. One thing currently missing from Eve is the ability to explore the contents of the Eve DB. Without this ability, Eve is as opaque as any other programming language. After all, the ability to inspect your program as it executes is one of the core features of our language.&lt;/p&gt;

&lt;p&gt;An idea we keep coming back to is the concept of &amp;ldquo;views&amp;rdquo;. Views are small graphical elements that represent records in the system. By default, they are just small squares, but a programmer can imbue them with properties (position, color, size, shape, etc.) to visualize the records they represent. For example, a graph can be constructed out of views by applying height and position properties to them, like in this example:&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;{{ site.url }}/images/pixels2.gif&#34; alt=&#34;Eve Syntax Highlighting&#34; /&gt;&lt;/p&gt;

&lt;p&gt;Here, we use &lt;code&gt;#pixel&lt;/code&gt; (views used to be called pixels, so this would currently be accessed using &lt;code&gt;#view&lt;/code&gt;) to inspect some records. Three views are displayed, one for each &lt;code&gt;#clock-hand&lt;/code&gt;. In this case, since we&amp;rsquo;re inspecting records, the views display the attributes and values for each of the records. Then, we change to a different mode and look at the history of a specific attribute on &lt;code&gt;#clock-hand&lt;/code&gt;s, namely &lt;code&gt;x2&lt;/code&gt;. This results in three graphs illustrating how &lt;code&gt;x2&lt;/code&gt; changes for each &lt;code&gt;#clock-hand&lt;/code&gt; over time.&lt;/p&gt;

&lt;p&gt;Obviously, this is just a concept at the moment, but the core idea we like about views is how flexible they are. We can package some default functionality, like the record inspector and history illustrated here. But even more importantly this functionality should be trivially extended by the programmer.&lt;/p&gt;

&lt;h3 id=&#34;community&#34;&gt;Community&lt;/h3&gt;

&lt;p&gt;I&amp;rsquo;m especially excited by the engagement we&amp;rsquo;ve seen from the community so far. It&amp;rsquo;s hard to know exactly how many people are following our development and using Eve, but so far we&amp;rsquo;ve received comments and feedback from users in Sydney, Copenhagen, Moscow, Finland, Hong Kong, the UK, Germany, and many other places.&lt;/p&gt;

&lt;h4 id=&#34;issues-pull-requests&#34;&gt;Issues + Pull Requests&lt;/h4&gt;

&lt;p&gt;Thank you to everyone who submitted a PR or an issue report. Specifically, thank you to &lt;a href=&#34;https://github.com/btheado&#34;&gt;@btheado&lt;/a&gt;,  &lt;a href=&#34;https://github.com/bertrandrustle&#34;&gt;@bertrandrustle&lt;/a&gt;, &lt;a href=&#34;https://github.com/RubenSandwich&#34;&gt;@RubenSandwich&lt;/a&gt;, &lt;a href=&#34;https://github.com/frankier&#34;&gt;@frankier&lt;/a&gt;, &lt;a href=&#34;https://github.com/dram&#34;&gt;@dram&lt;/a&gt;, and &lt;a href=&#34;https://github.com/martinchooooooo&#34;&gt;@martinchooooooo&lt;/a&gt;. Let me know if I missed anyone!&lt;/p&gt;

&lt;h4 id=&#34;rfcs&#34;&gt;RFCs&lt;/h4&gt;

&lt;p&gt;The syntax RFC received a lot of &lt;a href=&#34;https://github.com/witheve/rfcs/issues/4&#34;&gt;activity&lt;/a&gt; this month, surpassing 100 comments from over a dozen users. Your comments have been well thought out, provocative, and very constructive, so thank you to everyone who has participated so far. Due to the feedback we received, we&amp;rsquo;ve already made several adjustments to the syntax, including changes to keywords and the general vocabulary of Eve (see above).&lt;/p&gt;

&lt;h4 id=&#34;documentation&#34;&gt;Documentation&lt;/h4&gt;

&lt;p&gt;Documentation is still in an early stage, but it&amp;rsquo;s improving daily.&lt;/p&gt;

&lt;h5 id=&#34;syntax-quick-reference&#34;&gt;Syntax Quick Reference&lt;/h5&gt;

&lt;p&gt;We put together a short &lt;a href=&#34;https://github.com/witheve/assets/blob/master/docs/SyntaxReference.pdf&#34;&gt;syntax reference&lt;/a&gt; with all the necessary details to help you write Eve programs.&lt;/p&gt;

&lt;h5 id=&#34;eve-handbook&#34;&gt;Eve Handbook&lt;/h5&gt;

&lt;p&gt;The &lt;a href=&#34;https://github.com/witheve/docs/blob/master/drafts/handbook/contents.md&#34;&gt;Eve Handbook&lt;/a&gt; has received some work this month, particularly in the area of documenting the standard library. If you&amp;rsquo;d like to contribute to the development of Eve, this is the easiest way to get started. You don&amp;rsquo;t even need to contribute any content; just pointing out the shortcomings of this document will help in its development. Major areas of improvement include:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Completeness - are there any missing gaps?&lt;/li&gt;
&lt;li&gt;Accuracy - is the handbook true to Eve?&lt;/li&gt;
&lt;li&gt;Exposition - is the document written in an order that helps people learn the language?&lt;/li&gt;
&lt;li&gt;Examples - many examples are needed, especially for the standard library&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;We&amp;rsquo;ll be improving the handbook and other documentation daily, so keep checking back.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Dev Diary (Dec): more zzjoin, communication, process spawning</title>
      <link>http://docs.witheve.com/posts/2015-01-08-dec/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://docs.witheve.com/posts/2015-01-08-dec/</guid>
      <description>

&lt;p&gt;Yet more turkey was had. What did they ever do to us?&lt;/p&gt;

&lt;h3 id=&#34;indexes-and-joins&#34;&gt;Indexes and joins&lt;/h3&gt;

&lt;p&gt;We continued work on the zzjoin idea from the end of last month. The current version is competitive with pairwise hashjoins on many workloads but performs poorly on highly skewed inputs. In &lt;a href=&#34;http://arxiv.org/abs/1310.3314&#34;&gt;Skew Strikes Back&lt;/a&gt; the authors argue that pairwise join algorithms cannot be optimal on many problems and that their key weakness is an inability to deal with certain kinds of skew.&lt;/p&gt;

&lt;p&gt;For our current algorithm, a simple example is the query &lt;code&gt;select from A, B, C where A.y = B.y and B.z = C.z&lt;/code&gt; where A and B are large but C only has one row. The current version propagates whenever it can, so it will always choose to reduce the solution space to match the one row in C. If that row has a high skew (ie it joins with a large number of rows in B) then this can cause a lot of work, work that we might not have to do if we can easily determine that the join between A and B is empty. Traditional query compilers deal with this by estimating the size of the joins ahead of time and choosing an appropriate order to evaluate them in.&lt;/p&gt;

&lt;p&gt;In Skew Strikes Back the authors give a harder example: &lt;code&gt;select from A, B, C where A.y = B.y and B.z = C.z and C.x = A.x&lt;/code&gt; where each of A, B and C has some rows with high skew. Any pairwise join produces O(n^2) intermediate results but the query itself only has O(n) results. The only way to deal with this is to make use of all the tables at once and to use different join orders for different subsets of data to navigate around the high skew.&lt;/p&gt;

&lt;p&gt;The new version we are working on controls propagation much more carefully. At each step, it chooses one variable and propagates the next bit of that variable. The choice of variable is determined by some heuristic, the most obvious being the total number of index nodes needed to track the resulting space - a measure that is closely related to skew. Instead of performing cost estimation up front and picking a static join order, like tradition query compilers, we effectively perform cost estimation during execution and use that to decide which part of the join to explore next. This allows us to detect skew and to choose different join orders for different subsets of the data to compensate. It also greatly reduces the amount of constant time work we have to perform per step.&lt;/p&gt;

&lt;p&gt;A few days ago we came across &lt;a href=&#34;http://arxiv.org/abs/1404.0703&#34;&gt;Joins via Geometric Resolutions&lt;/a&gt; which develops a similar join algorithm called tetris and proves a number of beyond-worst-case results for it. Both tetris and zzjoin represent the solution space as an n-dimensional volume and attempt to tile the space with empty volumes from the indexes, represented as tuples of bitstrings. Where zzjoin uses a strict binary decomposition of the space and focuses on choosing a good decomposition, tetris uses a complex indexing and memoization scheme to exactly represent their tiling. While the similarity is encouraging, the authors argue that this memoization scheme is essential for achieving their strong theoretical guarantees. We need to do more work to figure out how that affects our ideas.&lt;/p&gt;

&lt;h3 id=&#34;communication&#34;&gt;Communication&lt;/h3&gt;

&lt;p&gt;Eve processes can now communicate with each other. Unlike &lt;a href=&#34;http://www.bloom-lang.net/&#34;&gt;Bloom&lt;/a&gt; we don&amp;rsquo;t have a special message table for communication. Instead, processes can dynamically subscribe to views in other processes, creating a local copy which is asynchronously updated. Compared to direct messaging, this allows &lt;a href=&#34;http://lambda-the-ultimate.org/node/2978&#34;&gt;observation without cooperation&lt;/a&gt; and enables easier composition of processes.&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;{{ site.url }}/images/chat.png&#34;&gt;&lt;img src=&#34;{{ site.url }}/images/chat.png&#34; alt=&#34;Chat&#34; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Under the hood, it&amp;rsquo;s still just plain old messaging and doesn&amp;rsquo;t attempt to hide the realities of distributed communication. The subscriber sends a subscription request and the remote process sends back timestamped diffs continuously until the connection is broken. It&amp;rsquo;s not yet clear exactly what consistency guarantees we will provide for eg multiple subscriptions to different views in the same process. We will have a better idea once we build more distributed programs and see what kind of patterns emerge.&lt;/p&gt;

&lt;h3 id=&#34;spawning&#34;&gt;Spawning&lt;/h3&gt;

&lt;p&gt;Eve processes can now spawn subprocesses and inject code into them. Together with the new communication API this allowed much of the IDE architecture to be lifted into Eve. When running in the browser only the UI manager lives on the main thread - the editor, the compiler and the user&amp;rsquo;s program all live in separate web-workers. The editor uses the process API to spawn both the compiler and the user&amp;rsquo;s program and then subscribes to the views it needs for the debugging interface. Both the editor and the user&amp;rsquo;s program send graphics data to the UI manager and receiving UI events in return.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Dev Diary (December 2016 - January 2017)</title>
      <link>http://docs.witheve.com/posts/2017-02-05-december-january/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://docs.witheve.com/posts/2017-02-05-december-january/</guid>
      <description>

&lt;p&gt;&lt;em&gt;(Eve is a new programming language, and this is our development blog. If you’re new to Eve, &lt;a href=&#34;http://play.witheve.com&#34;&gt;start here&lt;/a&gt;)&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;After a long journey during the year, we closed out 2016 on a high note with the release of Eve Alpha v0.2.3, and some very exciting community engagement. We&amp;rsquo;re looking to keep the momentum going in 2017, so let&amp;rsquo;s take a look at what we&amp;rsquo;ve been doing the past couple months.
December was really a time of reflection, as we had to consider what to do with the feedback we received following the v0.2 release. Ultimately, it was pretty clear (particularly in &lt;a href=&#34;https://groups.google.com/forum/#!topic/eve-talk/vR-4y2kJv4Q&#34;&gt;this thread&lt;/a&gt;) that general feedback aligned along three directions:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Database explorer/visualizer&lt;/li&gt;
&lt;li&gt;Extensibility&lt;/li&gt;
&lt;li&gt;Real-world examples&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Ideally, we&amp;rsquo;d like to build a database explorer for Eve in Eve itself. Unfortunately, the v0.2.x version of Eve lacks some features that would make this possible (like the ability to introspect the compiler, treating code as records). This drove us to embark on an extensive refactor (happening on the &lt;a href=&#34;https://github.com/witheve/Eve/tree/refactor-runtime&#34;&gt;refactor-runtime brach&lt;/a&gt;), which will accomplish a couple of goals simultaneously:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;Making the runtime incremental. The v0.2 runtime wastes a lot of time doing unnecessary computation. An incremental Eve runtime will be smarter about how it uses resources, computing values only when they need to be updated. This kind of optimization is already showing an order-of-magnitude improvement in performance, making Eve more practical for more resource-intensive programs.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Making the runtime extensible, meaning new ways to interface with Eve (see the Javascript DSL below, for example), and the ability to get data into and out of Eve. The Javascript DSL in particular means that you’ll be able to integrate Eve into an existing project seamlessly. From there, you can use as little or as much Eve as you want.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Making the runtime more approachable. We&amp;rsquo;re going to be re-structuring the directory layout, as well as extensively documenting each component. Furthermore, we&amp;rsquo;ll be building the runtime through pull requests, so we have a complete history of its development.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&#34;dsl&#34;&gt;DSL&lt;/h4&gt;

&lt;p&gt;As part of the refactor, we&amp;rsquo;ve built a Javascript DSL to write Eve code. The following block is
Javascript, but it describes an Eve block:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;let prog = new Program(&amp;quot;test&amp;quot;);
 prog.block(&amp;quot;simple block&amp;quot;, ({find, record, lib}) =&amp;gt; {
    let a = find(&amp;quot;person&amp;quot;);
    let b = find(&amp;quot;person&amp;quot;);
    a.age &amp;gt; b.age;
    let result = a.age + b.age;
    return [
     record({age1: a.age, age2: b.age, result})
    ]
 });
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;If you&amp;rsquo;re familiar with the Eve syntax, this is equivalent to:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;search
  a = [#person]
  b = [#person]
  a.age &amp;gt; b.age
  result = a.age + b.age

commit
 [age1: a.age, age2: b.age, result]
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;You can embed these blocks in any Javascript code, allowing you to seamlessly incorporate Eve into existing projects. Documentation is forthcoming, but in the meantime you can see more examples of the DSL in practice in the &lt;a href=&#34;https://github.com/witheve/Eve/tree/refactor-runtime/test&#34;&gt;tests folder&lt;/a&gt; of the refactor branch.&lt;/p&gt;

&lt;h4 id=&#34;eve-examples&#34;&gt;Eve Examples&lt;/h4&gt;

&lt;p&gt;While the runtime is being refactored, we will be releasing some larger-scale examples of Eve programs. We&amp;rsquo;ll start with some example mini-programs, each of which illustrate a component of a larger, more complete app. These smaller examples will be hosted on the &lt;a href=&#34;https://github.com/witheve/eve-examples&#34;&gt;witheve/eve-examples&lt;/a&gt; repository.&lt;/p&gt;

&lt;p&gt;Development of the first large-scale example is going on in the &lt;a href=&#34;https://github.com/witheve/mamarob&#34;&gt;witheve/mamarob&lt;/a&gt; repository. This example is a food truck management app, which allows a user to manage a food truck menu, take orders, accept payments, and integrate with social media. This app should cover everything you need to know in order to build your own complete Eve application. It&amp;rsquo;s not quite finished yet, but we&amp;rsquo;ll let you know when it&amp;rsquo;s complete!&lt;/p&gt;

&lt;p&gt;After that we have a couple more projects in mind, including a robot car and an operations management example. We’ll keep you updated as work on those commences.&lt;/p&gt;

&lt;h3 id=&#34;community&#34;&gt;Community&lt;/h3&gt;

&lt;h4 id=&#34;eve-around-the-world&#34;&gt;Eve Around the World&lt;/h4&gt;

&lt;p&gt;We are very happy to see meetups being organized by members of the Eve community. In January we saw two meetups, one in Pittsburgh, PA and another in Copenhagen, Denmark.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Pittsburgh, January 17&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Ruben Niculcea organized a &lt;a href=&#34;https://www.meetup.com/Pittsburgh-Code-Supply/events/235492181/&#34;&gt;meetup&lt;/a&gt; in Pittsburgh Pennsylvania, hosted by Pittsburgh Code &amp;amp; Supply Co. The presentation was recorded, and you can view it below:&lt;/p&gt;

&lt;iframe width=&#34;560&#34; height=&#34;315&#34; src=&#34;https://www.youtube.com/embed/GRSFMLc_AfM&#34; frameborder=&#34;0&#34; allowfullscreen&gt;&lt;/iframe&gt;

&lt;p&gt;Or, if you prefer you can view Ruben&amp;rsquo;s slides directly &lt;a href=&#34;https://docs.google.com/presentation/d/1honhRiF6TVWz9kGh90WG3hKWJmgRe9MhyRGoYrOFgFo/edit?usp=sharing&#34;&gt;here&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;You can read some follow-up discussion, as well as view the results of the survey mentioned in the video &lt;a href=&#34;https://groups.google.com/forum/#!topic/eve-talk/oBIq-KgAjSQ&#34;&gt;here&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Copenhagen, January 25&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;The Eve meetup group in Copenhagen, founded by Zubair Quraishi, held its &lt;a href=&#34;https://www.meetup.com/evecph/events/237131433/&#34;&gt;second meetup&lt;/a&gt; in January. There was a &lt;a href=&#34;https://groups.google.com/forum/#!topic/eve-talk/zAXkukWgEXM&#34;&gt;followup discussion&lt;/a&gt; on the mailing list as well.&lt;/p&gt;

&lt;p&gt;If you&amp;rsquo;d like to host an Eve meetup in your area, let us know how we can help. We&amp;rsquo;re very encouraged to see this kind of spontaneous engagement, so thanks again to Ruben and Zubair for making these meetups a success!&lt;/p&gt;

&lt;h4 id=&#34;eve-around-the-web&#34;&gt;Eve Around the Web&lt;/h4&gt;

&lt;p&gt;&lt;a href=&#34;https://twitter.com/liron&#34;&gt;Liron Shapira&lt;/a&gt;, finished his six-part series on Eve with a post titled &lt;a href=&#34;https://hackernoon.com/why-eve-will-be-perfect-for-realtime-apps-92b965b80ad#.sl1fmo2hv&#34;&gt;&amp;ldquo;Eve will be perfect for realtime apps&amp;rdquo;&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Finally, William Taysom wrapped up his &lt;a href=&#34;https://groups.google.com/forum/#!searchin/eve-talk/%22Puzzles$20$26$20Paradoxes%22%7Csort:date&#34;&gt;&lt;em&gt;Puzzles and Paradoxes&lt;/em&gt; series&lt;/a&gt; on the mailing list. In total, there are 24 puzzles, which highlight some of the surprising or interesting corners of the Eve language.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Dev Diary (February 2017)</title>
      <link>http://docs.witheve.com/posts/2017-03-08-february/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://docs.witheve.com/posts/2017-03-08-february/</guid>
      <description>

&lt;p&gt;&lt;em&gt;(Eve is a new programming language, and this is our development blog. If you’re new to Eve, &lt;a href=&#34;http://play.witheve.com&#34;&gt;start here&lt;/a&gt;)&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;In February, we continued our efforts to refactor the runtime, making progress to the point where we can run the Flappy Bird example in the new codebase. We&amp;rsquo;ve also invested a lot of time commenting the new codebase, explaining how Eve works internally. For instance, &lt;a href=&#34;https://github.com/witheve/Eve/blob/dbf9c52add5d3f018901a10ae2ef5c0ef2a1d5ea/src/runtime/runtime.ts#L442&#34;&gt;here&lt;/a&gt; is an explanation of how joins work in Eve. When the dust settles on this refactor, we hope that the increased documentation/commenting will lead to a better understanding of how Eve works for those interested.&lt;/p&gt;

&lt;h3 id=&#34;platform&#34;&gt;Platform&lt;/h3&gt;

&lt;p&gt;The runtime refactor has three goals:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Create a better extensibility story for Eve&lt;/li&gt;
&lt;li&gt;Allow easier incorporation of Eve into existing projects and with existing JS libraries and frameworks&lt;/li&gt;
&lt;li&gt;Improve the performance of the Eve runtime&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Let&amp;rsquo;s look at how the refactor is accomplishing those so far.&lt;/p&gt;

&lt;h4 id=&#34;watchers&#34;&gt;Watchers&lt;/h4&gt;

&lt;p&gt;Watchers are the primary interface to get data into and out of Eve. Let&amp;rsquo;s say you have an Eve program that produces records tagged &lt;code&gt;#email/send&lt;/code&gt;. Currently there is no way to send e-mails from within Eve, but if you had those records in Javascript, you could use an existing library. This is where watchers come in. To access records in Eve from Javascript, you would write a watcher that searches for records of interest, and then handles them in a callback. For instance:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre&gt;&lt;code class=&#34;language-javascript&#34; data-lang=&#34;javascript&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;program&lt;/span&gt;
 &lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;watch&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;quot;Send emails&amp;quot;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;({&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;find&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;record&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;})&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
    &lt;span class=&#34;kd&#34;&gt;let&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;email&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;find&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;quot;email/send&amp;quot;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;
    &lt;span class=&#34;k&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;
     &lt;span class=&#34;nx&#34;&gt;record&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;({&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;to&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;email&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;to&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;from&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;email&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;from&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;subject&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;email&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;subject&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;body&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;email&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;body&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;})&lt;/span&gt;
    &lt;span class=&#34;p&#34;&gt;];&lt;/span&gt;
 &lt;span class=&#34;p&#34;&gt;})&lt;/span&gt;
 &lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;asObjects&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;to&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;string&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;from&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;string&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;subject&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;string&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;body&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;string&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;((&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;diff&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
    &lt;span class=&#34;k&#34;&gt;for&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;kd&#34;&gt;let&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;email&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;of&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;diff&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;adds&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
     &lt;span class=&#34;kd&#34;&gt;let&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;to&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;from&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;subject&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;body&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;email&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
     &lt;span class=&#34;nx&#34;&gt;sendAnEmail&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;to&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;from&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;subject&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;body&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;
    &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
 &lt;span class=&#34;p&#34;&gt;});&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;This watcher finds records tagged &lt;code&gt;#email/send&lt;/code&gt;, and makes them available as objects in Javascript. When a new record is created in Eve, this is reflected in &lt;code&gt;diff.adds&lt;/code&gt;, and processed in the supplied callback function. In this case, each element in &lt;code&gt;diff.adds&lt;/code&gt; goes through the hypothetical Javascript function &lt;code&gt;sendAnEmail()&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Watchers also accomplish the related task of getting data into Eve, with a call to &lt;code&gt;this.program.inputEAVs(/* list of EAVs */)&lt;/code&gt;, where the argument is just a list of EAV triples.
Some examples of these interfaces at work are in the renderer, which turns Eve &lt;a href=&#34;https://github.com/witheve/Eve/blob/refactor-runtime/src/watchers/dom.ts&#34;&gt;records into DOM objects&lt;/a&gt;, and turns DOM events (like &lt;a href=&#34;https://github.com/witheve/Eve/blob/refactor-runtime/src/watchers/html.ts#L31&#34;&gt;click&lt;/a&gt;) into records.&lt;/p&gt;

&lt;h4 id=&#34;function-interface&#34;&gt;Function Interface&lt;/h4&gt;

&lt;p&gt;We&amp;rsquo;ve also simplified the function interface in Eve, making it easier for you to use foreign functions. This is a little more complicated in Eve than other languages, because Eve makes some assumptions about functions that Javascript does not guarantee:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Functions in Eve are referentially transparent, meaning for a given input, the function produces the same output.&lt;/li&gt;
&lt;li&gt;Functions in Eve are monotonic, meaning more inputs cannot lead to fewer outputs.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;For a function to fit into the Eve model, it must meet these qualifications. Therefore, to use Javascript functions in Eve, you must wrap the function and guarantee these two conditions yourself. Fortunately, as I stated above, this is much easier in the refactored runtime. Take the &lt;a href=&#34;https://github.com/witheve/Eve/blob/refactor-runtime/src/runtime/stdlib.ts#L66&#34;&gt;plus function&lt;/a&gt;, for instance:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre&gt;&lt;code class=&#34;language-javascript&#34; data-lang=&#34;javascript&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;makeFunction&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;({&lt;/span&gt;
 &lt;span class=&#34;nx&#34;&gt;name&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;quot;math/+&amp;quot;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
 &lt;span class=&#34;nx&#34;&gt;args&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;a&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;quot;number&amp;quot;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;b&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;quot;number&amp;quot;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;},&lt;/span&gt;
 &lt;span class=&#34;nx&#34;&gt;returns&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;result&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;quot;number&amp;quot;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;},&lt;/span&gt;
 &lt;span class=&#34;nx&#34;&gt;apply&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;a&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;number&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;b&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;number&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
    &lt;span class=&#34;k&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;a&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;+&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;b&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;];&lt;/span&gt;
 &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;});&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;As the function wrapper, you supply its name, arguments, returns, and then the function definition. What about a function like &lt;a href=&#34;https://github.com/witheve/Eve/blob/refactor-runtime/src/runtime/stdlib.ts#L197&#34;&gt;&lt;code&gt;random&lt;/code&gt;&lt;/a&gt;, which would seem to violate the conditions outlined above? This is an example where the function wrapper must take greater care to ensure the function behaves properly in Eve. By memoizing the input seed using the function&amp;rsquo;s internal &lt;code&gt;state&lt;/code&gt;, we can ensure that the &lt;code&gt;random&lt;/code&gt; function in Eve is referentially transparent:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre&gt;&lt;code class=&#34;language-javascript&#34; data-lang=&#34;javascript&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;makeFunction&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;({&lt;/span&gt;
 &lt;span class=&#34;nx&#34;&gt;name&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;quot;random/number&amp;quot;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
 &lt;span class=&#34;nx&#34;&gt;args&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;seed&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;quot;any&amp;quot;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;},&lt;/span&gt;
 &lt;span class=&#34;nx&#34;&gt;returns&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;result&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;quot;number&amp;quot;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;},&lt;/span&gt;
 &lt;span class=&#34;nx&#34;&gt;initialState&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{},&lt;/span&gt;
 &lt;span class=&#34;nx&#34;&gt;apply&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;kd&#34;&gt;function&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;seed&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;RawValue&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
    &lt;span class=&#34;kd&#34;&gt;let&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;state&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;this&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;state&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
    &lt;span class=&#34;kd&#34;&gt;let&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;result&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;state&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;seed&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;];&lt;/span&gt;
    &lt;span class=&#34;k&#34;&gt;if&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;result&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;===&lt;/span&gt; &lt;span class=&#34;kc&#34;&gt;undefined&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
     &lt;span class=&#34;nx&#34;&gt;result&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;state&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;seed&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;nb&#34;&gt;Math&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;random&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;();&lt;/span&gt;
    &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
    &lt;span class=&#34;k&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;result&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;];&lt;/span&gt;
 &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;});&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;This interface still needs some more work, to define functions that take a single input and produce multiple outputs. But where it stands, this interface opens the door to using Eve with existing Javascript libraries and functions.&lt;/p&gt;

&lt;h4 id=&#34;performance&#34;&gt;Performance&lt;/h4&gt;

&lt;p&gt;Performance concerns were a heavy motivating factor for undergoing the current refactor. The v0.2.x runtime executed blocks in batches, meaning that if a fact changed between ticks, the affected blocks would be entirely recomputed, even if the change did not impact the final output of the block. For instance:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre&gt;&lt;code class=&#34;language-eve&#34; data-lang=&#34;eve&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&#34;kr&#34;&gt;search&lt;/span&gt;
  &lt;span class=&#34;nv&#34;&gt;x&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;#&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;foo&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]&lt;/span&gt;
  &lt;span class=&#34;nv&#34;&gt;foo&lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;value&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;10&lt;/span&gt;

&lt;span class=&#34;kr&#34;&gt;bind&lt;/span&gt; &lt;span class=&#34;err&#34;&gt;@&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;browser&lt;/span&gt;
  &lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;#&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;div&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;text&lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;foo&lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;value&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;If a &lt;code&gt;#foo&lt;/code&gt; is added with a value less than 10, this entire block will be recomputed, even though the output is not changed (since the added fact is filtered from the output).Obviously, this resulted in needless overhead, but with exponential time complexity, it also presented an upper-bound on how many facts Eve was able to handle. The new runtime executes incrementally, recomputing only those facts which have changed since the preceding tick. This execution model operates with linear time complexity, and so the upper limit on facts has increased drastically.&lt;/p&gt;

&lt;p&gt;As a comparison test, we streamed updates through a block that created an HTML record with text in it (like the block above). The old runtime would time-out at around 3k updates, which took ~70 seconds. Compare this with the new runtime, which can stream 10k updates in ~400 - 500 ms. We’ll measure performance more accurately when the runtime refactor work is complete, but this preliminary result shows great potential.&lt;/p&gt;

&lt;p&gt;The work to make the Eve runtime incremental we adapted heavily from the awesome research &lt;a href=&#34;https://github.com/frankmcsherry/&#34;&gt;Frank McSherry&lt;/a&gt; has done on &lt;a href=&#34;https://github.com/frankmcsherry/differential-dataflow&#34;&gt;Differential Dataflow&lt;/a&gt;. Translating those ideas to a runtime for Eve has led us to some interesting discoveries (maybe even some fundamental contributions!) that we&amp;rsquo;ll talk about once the dust settles.&lt;/p&gt;

&lt;h3 id=&#34;community&#34;&gt;Community&lt;/h3&gt;

&lt;h4 id=&#34;eve-examples&#34;&gt;Eve Examples&lt;/h4&gt;

&lt;p&gt;Last month we posted several example applications, meant to distill common Eve patterns into small, self-contained applications.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://play.witheve.com/#gist:0049b5b77a1e01b0124c96c820ff3374-crazy-mikes.eve&#34;&gt;Example 1 - Crazy Mike&amp;rsquo;s&lt;/a&gt; - Demonstrates how to set up a multi-page application.&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://play.witheve.com/#gist:8ba50b7bd48b338c85c0590c0cba1563-sandlot.eve&#34;&gt;Example 2 - The Sandlot&lt;/a&gt; - Demonstrates how to create and resuse a custom component.&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://play.witheve.com/#gist:56fda335208ba82af8e327f95a0b9efc-ex3-jurassicpark.eve&#34;&gt;Example 3 - Jurassic Park&lt;/a&gt; - Demonstrates the creation and use of a form component.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;These examples (and more to come) are available in the eve-examples repository, located &lt;a href=&#34;https://github.com/witheve/eve-examples&#34;&gt;here&lt;/a&gt;. We&amp;rsquo;ll have Example 4 available on Monday, which will further make use of and extend the form component introduced in Example 3.&lt;/p&gt;

&lt;h4 id=&#34;contributions&#34;&gt;Contributions&lt;/h4&gt;

&lt;p&gt;We&amp;rsquo;d like to extend a thank you to everyone who contributed to Eve this month. With the codebase currently undergoing refactoring, we realize contributing can be difficult at this time, but we appreciate everyone who took the effort!&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/JulianKniephoff&#34;&gt;@JulianKniephoff&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/shamrin&#34;&gt;@shamrin&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/wilk&#34;&gt;@wilk&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&#34;eve-around-the-world&#34;&gt;Eve Around the World&lt;/h4&gt;

&lt;p&gt;We&amp;rsquo;ve gotten word of two new meetups, one of which is happening early next month&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;New Orleans, March 7&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Tyler Tallman &lt;a href=&#34;https://www.meetup.com/no-fun/events/237247045/?_af=event&amp;amp;_af_eid=237247045&amp;amp;https=on&#34;&gt;give a talk&lt;/a&gt; on Eve as part of the New Orleans Functional Club, which happened last night. We&amp;rsquo;ll check in with them and see how it went.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;San Francisco Bay Area, TBD Early April&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://twitter.com/anfedorov&#34;&gt;Andrey Fedorov&lt;/a&gt; is planning a talk about Eve for the next &lt;a href=&#34;http://2020salon.blogspot.com/&#34;&gt;&lt;sup&gt;20&lt;/sup&gt;&amp;frasl;&lt;sub&gt;20&lt;/sub&gt; Salon&lt;/a&gt; meeting in the Bay Area next month. The date is tentatively set for early April, so we&amp;rsquo;ll keep you updated when a firm date becomes available. If you&amp;rsquo;d like to attend, they ask that you &lt;a href=&#34;http://2020salon.blogspot.com/&#34;&gt;RSVP&lt;/a&gt; so they can accommodate everyone.&lt;/p&gt;

&lt;p&gt;If you&amp;rsquo;d like to host your own meetup, &lt;a href=&#34;mailto:corey@kodowa.com&#34;&gt;let us know&lt;/a&gt;, and we&amp;rsquo;ll &lt;a href=&#34;https://twitter.com/Ruben__Sandwich/status/836927833716965376&#34;&gt;do what we can&lt;/a&gt; to support your event.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Dev Diary (March 2017) - v0.3 alpha pre-release</title>
      <link>http://docs.witheve.com/posts/2017-04-06-march/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://docs.witheve.com/posts/2017-04-06-march/</guid>
      <description>

&lt;p&gt;&lt;em&gt;(Eve is a new programming language, and this is our development blog. If you’re new to Eve, &lt;a href=&#34;http://play.witheve.com&#34;&gt;start here&lt;/a&gt;)&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;Last month we updated you with some changes happening to the Eve runtime, including the addition of a Javascript DSL. Today we&amp;rsquo;re happy to announce a pre-release version of Eve v0.3 alpha. This &amp;ldquo;pre-release&amp;rdquo; is meant for members of the Eve community to preview the features of v0.3 before it&amp;rsquo;s ready for a broader audience (for example, docs, guides, and tools like the editor still need more work). We think you&amp;rsquo;ll appreciate some of the new features, so let&amp;rsquo;s take a look at what is new!&lt;/p&gt;

&lt;h3 id=&#34;platform&#34;&gt;Platform&lt;/h3&gt;

&lt;p&gt;The big news today is that the runtime refactor we began earlier this year is capable of running full Eve programs. It still needs a lot of usability, documentation, and tooling work before it&amp;rsquo;s ready for an official release; nonetheless, this runtime already accomplishes many of the objectives identified earlier this year, like improving Eve&amp;rsquo;s extensibility. So we&amp;rsquo;re moving the runtime-refactor branch over to master, and making this version more accessible to the community. We&amp;rsquo;ll continue to work on this branch and release a more complete v0.3 later this year.&lt;/p&gt;

&lt;p&gt;To get the pre-release you have a couple of options:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Download the npm package with &lt;code&gt;npm install witheve@preview&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Clone the &lt;a href=&#34;https://github.com/witheve/eve-starter&#34;&gt;eve-starter repository&lt;/a&gt;:&lt;/li&gt;
&lt;/ol&gt;

&lt;pre&gt;&lt;code&gt;git clone git@github.com:witheve/eve-starter.git
cd eve-starter
npm install
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The eve-starter repository is new, and demonstrates how a project can use Eve as a dependency. Whereas the v0.2 example programs were bundled with the Eve runtime, these example programs have no special privilege. Feel free to use this as a starting point for your own Eve project.&lt;/p&gt;

&lt;p&gt;Here&amp;rsquo;s what&amp;rsquo;s new in the v0.3 pre-release.&lt;/p&gt;

&lt;h4 id=&#34;javascript-dsl&#34;&gt;Javascript DSL&lt;/h4&gt;

&lt;p&gt;We&amp;rsquo;ve talked a little about this before, but Eve now has a Javascript DSL. Right now, this is the only interface to the v0.3 runtime (the Eve syntax will be coming with the official release). The DSL has the same semantics as the Eve syntax, and even closely mirrors its form as well. Here is a translation guide between the Eve syntax and the DSL:&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Basics&lt;/strong&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;- find a record: find(&amp;quot;person&amp;quot;, {salary}) &amp;lt;-&amp;gt; search [#person salary]
- bind/commit:   return[record(&amp;quot;person&amp;quot;, {salary})] &amp;lt;-&amp;gt; bind [#person salary]
- functions:     lib.math.sin(number) &amp;lt;-&amp;gt; sin[degrees: number]
- aggregates:    gather(person).per(person.dept).count() &amp;lt;-&amp;gt; count[given: person, per: person.dept]
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;strong&gt;Sub-Blocks&lt;/strong&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;- not:    not(() =&amp;gt; person.salary) &amp;lt;-&amp;gt; not(person.salary)
- choose: choose(() =&amp;gt; { person.salary; return 1; }, () =&amp;gt; 0) &amp;lt;-&amp;gt; if person.salary then 1 else 0
- union:  union(() =&amp;gt; person.salary, () =&amp;gt; person.wage) &amp;lt;-&amp;gt; if person.salary then person.salary if person.wage then person.wage
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;strong&gt;Update Operators&lt;/strong&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;- Add a value:         person.add(&amp;quot;salary&amp;quot;, 10) &amp;lt;-&amp;gt; person.salary += 10
- Remove a value:      person.remove(&amp;quot;salary, 10) &amp;lt;-&amp;gt; person.salary -= 10
- Set a value:         person.remove(&amp;quot;salary&amp;quot;).add(&amp;quot;salary&amp;quot;, 10) &amp;lt;-&amp;gt; person.salary := 10
- Remove an attribute: person.remove(&amp;quot;salary&amp;quot;) &amp;lt;-&amp;gt; person.salary := none
- Remove a record:     person.remove() &amp;lt;-&amp;gt; person := none
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Again, docs are sparse at the moment, but we&amp;rsquo;ve put together a &lt;a href=&#34;https://github.com/witheve/docs/blob/master/guides/dsl.md&#34;&gt;basic guide&lt;/a&gt; for the DSL, which should get you started.&lt;/p&gt;

&lt;h4 id=&#34;importing-exporting-data&#34;&gt;Importing/Exporting Data&lt;/h4&gt;

&lt;p&gt;One of the most common requests after the v0.2 release of Eve was &amp;ldquo;How do I get my data into Eve?&amp;rdquo;. People wanted to use Eve to work with data they already had, but at the time Eve was intentionally siloed from the rest of the world. Now working with external data is much easier thanks to the DSL; if you can get your data into Javascript, you can get it into Eve.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Importing Data into Eve&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Getting data into Eve is accomplished with the &lt;code&gt;inputEAVs()&lt;/code&gt; interface, which allows you to insert a raw entity, attribute, value triple into the Eve database. EAVs are the core dataype in Eve, and define everything from clicks to your application interface. Combined with the &lt;code&gt;appendAsEAVS()&lt;/code&gt; function, which turns an object into an array of EAVs, you can now turn regular Javascript objects into Eve records.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Exporting Data from Eve&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;The opposite is true as well &amp;ndash; you can turn Eve records into Javascript objects. This is accomplished through a watcher block. These operate as normal bind blocks, except they allow you to use a callback function to respond to changes in records (diffs). This allows you the opportunity to react to those changes using native Javascript functions and libraries. Here is an example watcher that calls out to a function external to Eve every time an &lt;code&gt;#email/send&lt;/code&gt; record is created.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre&gt;&lt;code class=&#34;language-javascript&#34; data-lang=&#34;javascript&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;program&lt;/span&gt;
 &lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;watch&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;quot;Send emails&amp;quot;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;({&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;find&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;record&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;})&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
    &lt;span class=&#34;kd&#34;&gt;let&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;email&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;find&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;quot;email/send&amp;quot;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;
    &lt;span class=&#34;k&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;
     &lt;span class=&#34;nx&#34;&gt;record&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;({&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;to&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;email&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;to&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;from&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;email&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;from&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;subject&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;email&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;subject&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;body&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;email&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;body&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;})&lt;/span&gt;
    &lt;span class=&#34;p&#34;&gt;];&lt;/span&gt;
 &lt;span class=&#34;p&#34;&gt;})&lt;/span&gt;
 &lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;asObjects&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;to&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;string&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;from&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;string&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;subject&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;string&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;body&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;string&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;((&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;diff&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
    &lt;span class=&#34;k&#34;&gt;for&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;kd&#34;&gt;let&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;email&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;of&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;diff&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;adds&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
     &lt;span class=&#34;kd&#34;&gt;let&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;to&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;from&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;subject&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;body&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;email&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
     &lt;span class=&#34;nx&#34;&gt;sendAnEmail&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;to&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;from&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;subject&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;body&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;
    &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
 &lt;span class=&#34;p&#34;&gt;});&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;As part of our documentation efforts, we&amp;rsquo;re going to be posting a series of short, to-the-point examples demonstrating how to connect to common sources of data (csv, APIs maybe even a serial port), so users can get started working with their data. Please let us know on the &lt;a href=&#34;https://groups.google.com/forum/#!topic/eve-talk/2TyfPDxcu08&#34;&gt;mailing list&lt;/a&gt; which data sources most interest you. Also, if you get any examples working yourself, be sure to let us know as well.&lt;/p&gt;

&lt;h3 id=&#34;community&#34;&gt;Community&lt;/h3&gt;

&lt;h4 id=&#34;contributions&#34;&gt;Contributions&lt;/h4&gt;

&lt;p&gt;Thanks to everyone who contributed pull requests last month!&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/wilk&#34;&gt;@wilk&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/shamrin&#34;&gt;@shamrin&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/christopherdumas&#34;&gt;@christopherdumas&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/thSoft&#34;&gt;@thSoft&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&#34;eve-around-the-world&#34;&gt;Eve Around the World&lt;/h4&gt;

&lt;p&gt;&lt;strong&gt;Berkeley, March 17&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Chris gave a talk at UC Berkeley&amp;rsquo;s &lt;a href=&#34;http://bid.berkeley.edu/&#34;&gt;BiD Lab&lt;/a&gt; about how programming language design could learn a thing or two from video games like Minecraft and Zelda: Breath of the Wild. Unfortunately, his talk wasn&amp;rsquo;t recorded, but we&amp;rsquo;ll release it in blog form later this month for anyone who couldn&amp;rsquo;t attend.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;San Francisco, March 25&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Last month &lt;a href=&#34;https://twitter.com/anfedorov&#34;&gt;Andrey Fedorov&lt;/a&gt; of the &lt;a href=&#34;http://2020salon.blogspot.com/&#34;&gt;&lt;sup&gt;20&lt;/sup&gt;&amp;frasl;&lt;sub&gt;20&lt;/sub&gt; Salon&lt;/a&gt; was kind enough to invite me to their meetup to talk about and demo Eve. We had a great time talking about Loopy, AirTable, and various other projects related and not related to Eve. Hopefully we can do it again when we have more to show here.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Copenhagen, April 26&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Zubair Quraishi is again hosting an Eve meetup in Copenhagen, scheduled for April 26. You can view all the relevant details on the &lt;a href=&#34;https://www.meetup.com/evecph/events/238989298/&#34;&gt;meetup page&lt;/a&gt;, or join the &lt;a href=&#34;https://groups.google.com/forum/#!topic/eve-talk/CXdWqgokhVI&#34;&gt;discussion&lt;/a&gt; on the mailing list.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;San Francisco, May TBD&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;We&amp;rsquo;re going to be holding our first official Eve meetup at the Eve office in downtown San Francisco in May. We don&amp;rsquo;t have any concrete details yet, but we wanted to let you know this is in the works. If you are interested in attending or have any ideas of what you&amp;rsquo;d like to learn, drop me a line via &lt;a href=&#34;mailto:corey@kodowa.com&#34;&gt;e-mail&lt;/a&gt; or &lt;a href=&#34;https://twitter.com/with_eve&#34;&gt;Twitter&lt;/a&gt;. We&amp;rsquo;ll let you know when plans are finalized.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Dev Diary (November 2016)</title>
      <link>http://docs.witheve.com/posts/2016-12-06-november/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://docs.witheve.com/posts/2016-12-06-november/</guid>
      <description>

&lt;p&gt;&lt;em&gt;(Eve is a new programming language, and this is our development blog. If you’re new to Eve, &lt;a href=&#34;http://play.witheve.com&#34;&gt;start here&lt;/a&gt;)&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;With the launch of Eve v0.2 at the end of October, the early weeks of November were spent reacting and responding to feedback from new users to the ever-growing Eve community. Still, we managed to make some pretty big changes to Eve this month, so let&amp;rsquo;s get right to it!&lt;/p&gt;

&lt;h3 id=&#34;what-s-new-in-eve-alpha-v0-2-2&#34;&gt;What&amp;rsquo;s new in Eve Alpha v0.2.2?&lt;/h3&gt;

&lt;p&gt;We&amp;rsquo;re starting to become more serious about version numbers and releases, but we don&amp;rsquo;t have a fixed release schedule yet. This release was triggered by the addition of the Eve npm package, which adds enough features to Eve that it&amp;rsquo;s worth highlighting them. For a full list of changes in v0.2.2, check out the [release notes][1.1]. We&amp;rsquo;ve got several highly requested features in there for you. Let&amp;rsquo;s take a look at those in detail.&lt;/p&gt;

&lt;h4 id=&#34;eve-npm-package&#34;&gt;Eve npm package&lt;/h4&gt;

&lt;p&gt;We published &lt;a href=&#34;https://www.npmjs.com/package/witheve&#34;&gt;a package&lt;/a&gt; for Eve on npm, so you can now install Eve like so:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;npm install -g witheve
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This will give you a global Eve installation that you can invoke with the command &lt;code&gt;eve&lt;/code&gt; from anywhere. Doing so will start an Eve server, in the same way &lt;code&gt;npm start&lt;/code&gt; currently does. (Note: be sure to install &lt;code&gt;witheve&lt;/code&gt;, as installing &lt;code&gt;eve&lt;/code&gt; will give you a different package)&lt;/p&gt;

&lt;h4 id=&#34;workspaces&#34;&gt;Workspaces&lt;/h4&gt;

&lt;p&gt;We&amp;rsquo;re introducing the ability to run Eve in a custom project workspace. To create a new Eve project workspace, create a folder with an empty file named &lt;code&gt;package.json&lt;/code&gt; then start Eve from within this folder. Eve recognizes that it&amp;rsquo;s starting in an Eve project, and will serve *.eve files from within this directory instead of the Eve examples folder. Furthermore, you can serve various assets, like images or CSS, by placing them in an &amp;ldquo;assets&amp;rdquo; sub-folder.&lt;/p&gt;

&lt;h4 id=&#34;server-mode&#34;&gt;Server Mode&lt;/h4&gt;

&lt;p&gt;Now, Eve can be started in server mode using the &lt;code&gt;--server&lt;/code&gt; flag:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;eve --server
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Without this flag, execution of Eve programs happens within the browser, with the Eve server acting as an intermediary between the browser and your local system. In server mode, Eve will instead execute your program on the server. Currently written programs will operate exactly as before, but this is a preliminary step in order to get networked Eve applications going (like a chat server or a multiplayer game). There is still work needed to be done there (currently &lt;a href=&#34;https://github.com/witheve/Eve/pull/620&#34;&gt;in review&lt;/a&gt;), so stay tuned for more!&lt;/p&gt;

&lt;h4 id=&#34;deploying-eve-apps&#34;&gt;Deploying Eve Apps&lt;/h4&gt;

&lt;p&gt;&lt;img src=&#34;{{ site.url }}/images/npm-eve.gif&#34; alt=&#34;Eve npm&#34; /&gt;&lt;/p&gt;

&lt;p&gt;This is one of the most requested features to date, so we&amp;rsquo;re happy to bring it to you! You can now run Eve applications without the editor, which should pave the way to deploying them on your own server. You can specify which Eve program you want to run after the Eve command:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;eve ~/myEveDir/myEveFile.eve
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Now you can navigate to Eve in your browser to access the specified program. If you like, you can also recover the editor with a flag:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;eve ~/myEveDir/myEveFile.eve --editor
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This will run the supplied Eve program with the editor visible.&lt;/p&gt;

&lt;h4 id=&#34;standard-library&#34;&gt;Standard Library&lt;/h4&gt;

&lt;p&gt;The standard library still needs a lot of work, but thanks to our intrepid community we made some great progress on adding basic functionality.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Added support for the vast majority of HTML/SVG tags (thanks &lt;a href=&#34;https://github.com/frankier&#34;&gt;@frankier&lt;/a&gt;!)&lt;/li&gt;
&lt;li&gt;Added &lt;code&gt;urlencode[]&lt;/code&gt; (thanks &lt;a href=&#34;https://github.com/renegr&#34;&gt;@renegr&lt;/a&gt;!)&lt;/li&gt;
&lt;li&gt;Achieved parity with Javascript math library functions and constants (thank &lt;a href=&#34;https://github.com/Cormac-Williams&#34;&gt;@Cormac-Williams&lt;/a&gt;!)&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;There&amp;rsquo;s still a lot of work to do here, so let us know if you&amp;rsquo;re missing some basic functions that could easily be added.&lt;/p&gt;

&lt;h3 id=&#34;community&#34;&gt;Community&lt;/h3&gt;

&lt;p&gt;It&amp;rsquo;s been a month now since the launch of Eve, and we&amp;rsquo;ve been thrilled by the response so far. It seems like I say this with every new dev diary, but every day we receive more issues, pull requests, and especially Eve programs that are getting increasingly sophisticated.&lt;/p&gt;

&lt;p&gt;With a fast growing community though, it&amp;rsquo;s tough staying on top of everything, especially with a small team like ours (we&amp;rsquo;re only 4 developers here, if you didn&amp;rsquo;t know!). Thankfully, our great community has been picking up the slack, answering questions on the mailing list, tracking down issues, identifying and implementing improvements, reviewing pull requests&amp;hellip; the list goes on. So a very special thanks goes out to our contributors this month:&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://github.com/frankier&#34;&gt;frankier&lt;/a&gt;,
&lt;a href=&#34;https://github.com/Cormac-Williams&#34;&gt;Cormac-Williams&lt;/a&gt;,
&lt;a href=&#34;https://github.com/renegr&#34;&gt;renegr&lt;/a&gt;,
&lt;a href=&#34;https://github.com/gamebox&#34;&gt;gamebox&lt;/a&gt;,
&lt;a href=&#34;https://github.com/mpj&#34;&gt;mpj&lt;/a&gt;,
&lt;a href=&#34;https://github.com/olafleur&#34;&gt;olafleur&lt;/a&gt;,
&lt;a href=&#34;https://github.com/beliharz&#34;&gt;beliharz&lt;/a&gt;,
&lt;a href=&#34;https://github.com/yshalabi&#34;&gt;yshalabi&lt;/a&gt;,
&lt;a href=&#34;https://github.com/jonnor&#34;&gt;jonnor&lt;/a&gt;,
&lt;a href=&#34;https://github.com/esoeylemez&#34;&gt;esoeylemez&lt;/a&gt;,
&lt;a href=&#34;https://github.com/claushellsing&#34;&gt;claushellsing&lt;/a&gt;,
&lt;a href=&#34;https://github.com/gilrosenthal&#34;&gt;gilrosenthal&lt;/a&gt;,
&lt;a href=&#34;https://github.com/matthiaslange&#34;&gt;matthiaslange&lt;/a&gt;,
&lt;a href=&#34;https://github.com/pragmatrix&#34;&gt;pragmatrix&lt;/a&gt;,
&lt;a href=&#34;https://github.com/eobrain&#34;&gt;eobrain&lt;/a&gt;,
&lt;a href=&#34;https://github.com/austinlyons&#34;&gt;austinlyons&lt;/a&gt;,
&lt;a href=&#34;https://github.com/shamrin&#34;&gt;shamrin&lt;/a&gt;,
&lt;a href=&#34;https://github.com/nmsmith&#34;&gt;nmsmith&lt;/a&gt;,
&lt;a href=&#34;https://github.com/Skinney&#34;&gt;Skinney&lt;/a&gt;,
&lt;a href=&#34;https://github.com/cgarvis&#34;&gt;cgarvis&lt;/a&gt;,
&lt;a href=&#34;https://github.com/vickychijwani&#34;&gt;vickychijwani&lt;/a&gt;, and
&lt;a href=&#34;https://github.com/thomaswrenn&#34;&gt;thomaswrenn&lt;/a&gt;.&lt;/p&gt;

&lt;h4 id=&#34;developing-with-the-community&#34;&gt;Developing with the Community&lt;/h4&gt;

&lt;p&gt;Surprisingly, one of the biggest changes to happen to Eve last month was our development process. For the past two years, we&amp;rsquo;ve been developing Eve in the open on GitHub, but many day-to-day details were sequestered in the Kodowa office. This was mainly for timeliness; discussing implementation or design details face-to-face is much faster than an asynchronous discussion on GitHub. But it also meant that the community really couldn&amp;rsquo;t participate in developing with us. With the release of v0.2, all that changes, as we are being much more deliberate about making the development of Eve transparent and open. Here are the ways we&amp;rsquo;re improving our community-focused development process.&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;The main Eve repository can only be updated through pull requests. This applies to everyone in the office as well, which means every change to Eve is now based in a PR that gets reviewed and tested. Hopefully this leads to higher quality code and fewer broken builds, but it also means we&amp;rsquo;re creating a log of all the work done on Eve; the changelog above is just a listing of all the PRs since the last release.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Everything is tracked in issues. If a bug is found we immediately make an issue for it. If we discuss a feature that&amp;rsquo;s needed, we make an issue for it. This way, anyone looking to contribute to Eve can come into the repository and find ways to contribute. We&amp;rsquo;re starting to label and categorize these issues, so beginners can find an appropriate issue to start working on.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;We&amp;rsquo;ll be refactoring the Eve codebase to make it more beginner friendly. Speaking of issues, that process is already tracked: [&lt;a href=&#34;https://github.com/witheve/Eve/issues/632&#34;&gt;632&lt;/a&gt;], [&lt;a href=&#34;https://github.com/witheve/Eve/issues/609&#34;&gt;609&lt;/a&gt;], [&lt;a href=&#34;https://github.com/witheve/Eve/issues/609&#34;&gt;608&lt;/a&gt;], [&lt;a href=&#34;https://github.com/witheve/Eve/issues/510&#34;&gt;510&lt;/a&gt;].&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;h4 id=&#34;top-feedback-for-eve&#34;&gt;Top Feedback for Eve&lt;/h4&gt;

&lt;p&gt;Now that Eve has been in general use for a month, we&amp;rsquo;d &lt;a href=&#34;https://groups.google.com/forum/#!topic/eve-talk/vR-4y2kJv4Q&#34;&gt;like to hear&lt;/a&gt; your top 3 pieces of feedback for Eve. This feedback can relate to the language itself, the syntax, the editor, the community, or anything else really. What&amp;rsquo;s working for you, what&amp;rsquo;s not? What&amp;rsquo;s the biggest feature you&amp;rsquo;re missing? Which feature has been the best? What&amp;rsquo;s surprised you the most? You can &lt;a href=&#34;https://groups.google.com/forum/#!topic/eve-talk/vR-4y2kJv4Q&#34;&gt;read feedback&lt;/a&gt; others have posted in the mailing list, and be sure to add your own!&lt;/p&gt;

&lt;h4 id=&#34;puzzles-paradoxes&#34;&gt;Puzzles &amp;amp; Paradoxes&lt;/h4&gt;

&lt;p&gt;One member of the community, &lt;a href=&#34;https://github.com/wtaysom&#34;&gt;William Taysom&lt;/a&gt;, has started writing a series of posts on the mailing list looking at some of the trickier corners of Eve. For example, how do you get the count of 0 records? What does the &lt;code&gt;per&lt;/code&gt; attribute do in an aggregate? Every day William is posting a new puzzle, and a solution to the previous day&amp;rsquo;s puzzle. Here are the puzzles to date:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;a href=&#34;https://groups.google.com/forum/#!topic/eve-talk/m3dWMdJlrpo&#34;&gt;Puzzles &amp;amp; Paradoxes I: How do you count #nothing?&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://groups.google.com/forum/#!topic/eve-talk/n2-A8CW1Iyg&#34;&gt;Puzzles &amp;amp; Paradoxes II: What is the PERpose?&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://groups.google.com/forum/#!topic/eve-talk/BP4CP4f-RRU&#34;&gt;Puzzles &amp;amp; Paradoxes III: Overcommitted&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://groups.google.com/forum/#!topic/eve-talk/7lhPSjHU3kM&#34;&gt;Puzzles &amp;amp; Paradoxes IV: Overbound&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;They&amp;rsquo;re becoming increasingly complex, so these puzzles might end up becoming a tutorial on their own.&lt;/p&gt;

&lt;h4 id=&#34;eve-around-the-web&#34;&gt;Eve Around the Web&lt;/h4&gt;

&lt;p&gt;Another member of the community, &lt;a href=&#34;https://twitter.com/liron&#34;&gt;Liron Shapira&lt;/a&gt;, has been writing a series about Eve on the website Hackernoon. It&amp;rsquo;s a 6 part series, with parts 1-5 out now:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;a href=&#34;https://hackernoon.com/how-eve-unifies-your-entire-programming-stack-900ca80c58a7&#34;&gt;How Eve unifies your entire programming stack&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://hackernoon.com/when-logic-programming-meets-cqrs-1137ab2a5f86&#34;&gt;When logic programming meets CQRS&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://hackernoon.com/throwing-off-our-scope-chains-7567beb2d0b6&#34;&gt;Throwing off our scope chains&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://hackernoon.com/smalltalk-and-protein-programming-4da245ac93e2&#34;&gt;Smalltalk and protein programming&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://hackernoon.com/the-rock-solid-foundation-for-eves-big-vision-225b80b91e11&#34;&gt;The rock-solid foundation for Eve’s big vision&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Part 6 should be coming soon! The first post in the series got a little attention on HN, so you can &lt;a href=&#34;https://news.ycombinator.com/item?id=13010396&#34;&gt;read the comments&lt;/a&gt; if you&amp;rsquo;re interested.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Dev Diary (October 2016)</title>
      <link>http://docs.witheve.com/posts/2016-11-18-october/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://docs.witheve.com/posts/2016-11-18-october/</guid>
      <description>

&lt;p&gt;&lt;em&gt;(Eve is a new programming language, and this is our development blog. If you’re new to Eve, &lt;a href=&#34;http://play.witheve.com&#34;&gt;start here&lt;/a&gt;)&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;In &lt;a href=&#34;http://incidentalcomplexity.com/2016/10/05/september/&#34;&gt;September&lt;/a&gt;, we were busy prepping for the launch of Eve. This work carried over into October, and we released Eve v0.2 on October 28. Thank you to everyone who gave Eve a try and sent us your comments and criticisms. We&amp;rsquo;ve read hundreds of comments on &lt;a href=&#34;https://news.ycombinator.com/item?id=12817468&#34;&gt;HN&lt;/a&gt;, Reddit, and the mailing list, so November is really focused on how to address these and what the right path forward for Eve is. But first let&amp;rsquo;s talk more about what we did in October!&lt;/p&gt;

&lt;h3 id=&#34;eve-alpha-v0-2&#34;&gt;Eve alpha v0.2&lt;/h3&gt;

&lt;p&gt;Again, the biggest news from October was the &lt;a href=&#34;https://github.com/witheve/Eve/releases/tag/v0.2.1&#34;&gt;release&lt;/a&gt; of Eve v0.2 (alpha) into the wild. We put up a lot of content on &lt;a href=&#34;http://programming.witheve.com&#34;&gt;programming.witheve.com&lt;/a&gt; explaining our vision, the major highlights of Eve, and some &lt;a href=&#34;http://programming.witheve.com/deepdives/lighttable.html&#34;&gt;discussion&lt;/a&gt; on how we got to where we are.
We also made a nice video, showing how we think Eve could be useful in a development context.&lt;/p&gt;

&lt;iframe width=&#34;560&#34; height=&#34;315&#34; src=&#34;https://www.youtube.com/embed/TWAMr72VaaU?rel=0&amp;amp;controls=0&amp;amp;showinfo=0&#34; frameborder=&#34;0&#34; allowfullscreen&gt;&lt;/iframe&gt;

&lt;p&gt;Key features demonstrated in this video are:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;The &lt;a href=&#34;http://programming.witheve.com/deepdives/literate.html&#34;&gt;literate programming&lt;/a&gt; environment for Eve - with the Table of Contents, document-like WYSIWYG editing experience, and live application view&lt;/li&gt;
&lt;li&gt;The inspector -  a debugging tool that lets you introspect and debug your program as it runs. The inspector is discussed more below.&lt;/li&gt;
&lt;li&gt;Views - allow you to visualize the result of a block below the actual block. So far you can view text and various charts and graphs. We&amp;rsquo;ll be adding more views in the future. More on this below.&lt;/li&gt;
&lt;li&gt;State loading - save and load the state of a running Eve application. This is useful in a bug report/debugging scenario. If you encounter a bug, you can save the state of the program and send it to another developer, who will see exactly the state of the application that you see.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;platform&#34;&gt;Platform&lt;/h3&gt;

&lt;p&gt;As we teased last month, the Eve platform has moved over to a TypeScript codebase. This was really a tactical move more than anything else. One of the main motivating factors was that with TypeScript we could run Eve in the browser without any setup. Providing a zero friction programming experience is what we are trying to do, and there was a lot of friction with the C runtime. The TS runtime will act as a reference implementation, so Eve can be implemented in other languages and work as a cohesive system.&lt;/p&gt;

&lt;h4 id=&#34;roadmap&#34;&gt;Roadmap&lt;/h4&gt;

&lt;p&gt;Let&amp;rsquo;s take a look at the platform roadmap, which provides a general direction for where we are headed:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;Milestone 1: Programming for humans (We are here)&lt;/strong&gt; - This milestone is about the language, semantics, syntax, and editor &amp;ndash; the basis of Eve on which everything else will be built. Right now we&amp;rsquo;re focusing on fleshing out the langauge, building the standard library, defining what it means to work with Eve for a project, figuring out how Eve fits in with existing projects, connecting Eve to different data sources, deploying Eve programs, etc.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;strong&gt;Milestone 2: The World Scale Computer&lt;/strong&gt; - Eve is a meant to be a distributed system by default. We&amp;rsquo;ve left those features out of the 0.2 release, but the next big release will be about how Eve programs scale and distribute to multiple machines.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;strong&gt;Milestone 3: Computation for all&lt;/strong&gt; - This final milestone is the furthest out, requiring us to revisit our &lt;a href=&#34;https://github.com/witheve/eve-experiments&#34;&gt;experimental work&lt;/a&gt; in end-user computing, and turning that into a real product for non-programmers. We&amp;rsquo;ve explored many ideas here, some more promising than others, but we still don&amp;rsquo;t have the right answer for what this looks like. So, we&amp;rsquo;ll be doing a lot more research before we can complete this milestone. One thing to note here is that we&amp;rsquo;re not calling this milestone &amp;ldquo;programming for all&amp;rdquo;. That&amp;rsquo;s intentional, for two reasons:&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt; 1. We don&amp;rsquo;t believe a product like this will resemble programming as it exists today. Will it be &lt;a href=&#34;http://incidentalcomplexity.com/2015/10/15/jul-sept/&#34;&gt;graphs&lt;/a&gt;? A &lt;a href=&#34;http://incidentalcomplexity.com/2016/06/03/oct-nov/&#34;&gt;grid&lt;/a&gt;? A &lt;a href=&#34;http://incidentalcomplexity.com/2016/06/10/jan-feb/&#34;&gt;wiki&lt;/a&gt;? We&amp;rsquo;re not sure, but it will be exciting to find out.&lt;/p&gt;

&lt;p&gt; 2. Most people don&amp;rsquo;t actually want to program. We don&amp;rsquo;t anticipate that the general population will want to use Eve to write traditional applications. Instead, we think Eve will be appealing to them for its ability to aggregate, transform, and distribute data to answer questions. Today, these are tasks you have need an experienced developer to accomplish. We don&amp;rsquo;t think it has to be that way.&lt;/p&gt;

&lt;h4 id=&#34;editor&#34;&gt;Editor&lt;/h4&gt;

&lt;p&gt;The biggest changes to the platform were in the editor. We&amp;rsquo;ve already looked at the table of contents and the editing experience, which have been polished a little more since September. Let&amp;rsquo;s look at some other changes though:&lt;/p&gt;

&lt;h5 id=&#34;the-inspector&#34;&gt;The Inspector&lt;/h5&gt;

&lt;p&gt;The inspector is activated via the magic wand icon at the top of the editor. This toggles inspection mode, which allows you to click on any block in your program or element in your application, and get some info about it.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://witheve.com/images/zoom.png&#34; alt=&#34;Eve Inspector&#34; /&gt;&lt;/p&gt;

&lt;p&gt;The inspector tool is a sort of one-stop-shop for all your debugging needs. If an area of your program isn&amp;rsquo;t displaying, the inspector can tell you why. If you see too many elements (or too few), the inspector will tell you how they came to be. If your program is running slowly, the inspector will tell you which blocks are consuming the most processing time:&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://witheve.com/images/slow.png&#34; alt=&#34;Performance&#34; /&gt;&lt;/p&gt;

&lt;h5 id=&#34;views&#34;&gt;Views&lt;/h5&gt;

&lt;p&gt;Up to this point we&amp;rsquo;ve been using &lt;code&gt;bind @browser [#div text]&lt;/code&gt; as a sort of &lt;code&gt;console.log()&lt;/code&gt; for Eve. This process is pretty antithetical to Eve, when you think about it. First, we&amp;rsquo;ve known for a long time now that drawing the result of a computation &lt;em&gt;spatially near&lt;/em&gt; the computation is very powerful for debugging. Second, many things you don&amp;rsquo;t want to visualize as text. You can&amp;rsquo;t &lt;code&gt;console.log()&lt;/code&gt; a bar-graph, for example.
Enter views. Views are a way to visualize a block&amp;rsquo;s output right under the block itself. By writing data into the &lt;code&gt;@view&lt;/code&gt; database, you can visualize it as chart, or even a time-series:&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://witheve.com/images/memory.gif&#34; alt=&#34;data over time&#34; /&gt;&lt;/p&gt;

&lt;p&gt;And of course we support plain text views:&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://witheve.com/images/openhttp.png&#34; alt=&#34;Text view&#34; /&gt;&lt;/p&gt;

&lt;p&gt;The nice thing about both the inspector and views is that they are implemented entirely in Eve! The following links open in the Eve editor:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://play.witheve.com/#/examples/analyzer.eve&#34;&gt;The analyzer&lt;/a&gt; (drives the inspector)&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://play.witheve.com/#/examples/inspector.eve&#34;&gt;The inspector&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://play.witheve.com/#/examples/view.eve&#34;&gt;Views&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://play.witheve.com/#/examples/editor.eve&#34;&gt;Editor&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;community&#34;&gt;Community&lt;/h3&gt;

&lt;p&gt;First, I&amp;rsquo;d like to say the response to Eve has been fantastic. The mailing list has seen a lot more activity and a 30% increase in membership since the launch, which is great. Beyond the volume though, we&amp;rsquo;ve also gotten some very detailed and thorough proposals, comments, pull requests, and bug reports. Hopefully we can keep up this momentum, so spread the word!&lt;/p&gt;

&lt;h4 id=&#34;handbook&#34;&gt;Handbook&lt;/h4&gt;

&lt;p&gt;The Eve handbook has been moved to &lt;a href=&#34;http://docs.witheve.com&#34;&gt;docs.witheve.com&lt;/a&gt;. The style now matches the Eve editor more closely, and you can now start to imagine how docs and Eve can work side by side. As always, there is an endless amount of work to do here, so keeping the docs up to date will be an ongoing process. If you find any docs that are missing, outdated, or insufficient, please let us know by submitting an issue here: &lt;a href=&#34;https://github.com/witheve/docs/issues&#34;&gt;https://github.com/witheve/docs/issues&lt;/a&gt;.&lt;/p&gt;

&lt;h4 id=&#34;eve-around-the-web&#34;&gt;Eve Around the Web&lt;/h4&gt;

&lt;p&gt;We made a little splash on the web that generated some discussions and stories. Here are the launch day discussion threads:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://news.ycombinator.com/item?id=12817468&#34;&gt;Hackernews&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.reddit.com/r/programming/comments/59vddn/eve_programming_designed_for_humans/&#34;&gt;/r/programming&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.reddit.com/r/compsci/comments/59x0b3/eve_programming_designed_for_humans/&#34;&gt;/r/compsci&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.producthunt.com/posts/eve-4&#34;&gt;ProductHunt&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;And even better, some user-generated videos and blogs about Eve! These were fascinating to read and watch, so thanks everyone for taking the time to make these.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://medium.com/@arnia/modelling-domains-declaratively-with-eve-a1eb93b80942#.ulaiisb2b&#34;&gt;Joe Geldart&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.youtube.com/watch?v=9nnmT3zf1yg&#34;&gt;Erik Hanchett&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.youtube.com/watch?v=aJpBYow99Ag&#34;&gt;Fun Fun Function&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://vickychijwani.me/eve/&#34;&gt;Vicky Chijwani&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    <item>
      <title>Dev Diary (September 2016)</title>
      <link>http://docs.witheve.com/posts/2016-10-05-september/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://docs.witheve.com/posts/2016-10-05-september/</guid>
      <description>

&lt;p&gt;&lt;em&gt;(Eve is a new programming language, and this is our development blog. If you’re new to Eve, &lt;a href=&#34;https://github.com/witheve/Eve&#34;&gt;start here&lt;/a&gt;)&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;When we last left off in &lt;a href=&#34;http://incidentalcomplexity.com/2016/08/31/august/&#34;&gt;August&lt;/a&gt;, we were iterating on the just-released community preview. In September, we improved the editor, worked on documentation, made some adjustments to the language, and also put Eve up on the Web.&lt;/p&gt;

&lt;h3 id=&#34;platform&#34;&gt;Platform&lt;/h3&gt;

&lt;h4 id=&#34;editor&#34;&gt;Editor&lt;/h4&gt;

&lt;p&gt;A lot of work has gone into imagining the editing experience for Eve. Here is &lt;a href=&#34;https://github.com/witheve/Eve/blob/master/examples/tic-tac-toe.eve&#34;&gt;Tic-Tac-Toe&lt;/a&gt; opened in the editor:&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;{{ site.url }}/images/editor.png&#34; alt=&#34;Eve editor&#34; /&gt;&lt;/p&gt;

&lt;p&gt;On the left we display the table of contents, in the center is the rendered program, and on the right is an area for comments. Let&amp;rsquo;s look at each one in turn:&lt;/p&gt;

&lt;h5 id=&#34;table-of-contents&#34;&gt;Table of Contents&lt;/h5&gt;

&lt;p&gt;The table of contents (TOC) is one of the more interesting features of the editor. The TOC is generated using the headers in the document, which allows you to bookmark key sections of the program. Clicking on an entry in the TOC moves the corresponding section into focus, so this is a nice way to navigate through a larger program.&lt;/p&gt;

&lt;p&gt;But we can go one step beyond this. One criticism of &lt;a href=&#34;https://witheve.github.io/docs/handbook/literate-programming/&#34;&gt;literate programs&lt;/a&gt; is that an ordering that makes narrative sense doesn&amp;rsquo;t necessarily make sense while editing a program. For example, in Tic-Tac-Toe, we talk about winning the game in two entirely different sections. That&amp;rsquo;s okay - instead of jumping around between sections, we can display only the sections we care about:&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;{{ site.url }}/images/markdown-elision.gif&#34; alt=&#34;Eve editor elision&#34; /&gt;&lt;/p&gt;

&lt;p&gt;Now the editing experience is customized to the task at hand. This opens up some interesting possibilities, like being able to save and share these views, or generating customized views based on a query. For example, during a code review you might want to see all blocks modified by Steve in the last week. Something like that is further down the line, but it&amp;rsquo;s nonetheless an interesting possibility.&lt;/p&gt;

&lt;h5 id=&#34;document-editing&#34;&gt;Document Editing&lt;/h5&gt;

&lt;p&gt;We&amp;rsquo;ve improved the editing experience with in-browser WYSIWYG support. One of the slight drawbacks of being &lt;a href=&#34;http://incidentalcomplexity.com/2016/08/31/august/#eve-and-markdown&#34;&gt;CommonMark compatible&lt;/a&gt; is having to type code fences for every block of code. Not only is this sometimes tedious, but backticks and tildes are not even on some international keyboards. Fear not: if you write code in our editor (and we hope you will, but you don&amp;rsquo;t have to) you can create a code block with a nifty shortcut. Furthermore, since we render Markdown in the editor, the code fences don&amp;rsquo;t clutter your code.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;{{ site.url }}/images/editor2.png&#34; alt=&#34;Eve editor&#34; /&gt;&lt;/p&gt;

&lt;h5 id=&#34;comments&#34;&gt;Comments&lt;/h5&gt;

&lt;p&gt;Finally, the editor has an area for comments. These aren&amp;rsquo;t code comments (although maybe they could be, we just don’t know how well that would work yet). Rather, you can think of this area as a place for collaborative comments from team members, similar to Google Docs. This area can also contain warnings and errors from the Eve compiler:&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;{{ site.url }}/images/comments.jpg&#34; alt=&#34;Eve editor comments&#34; /&gt;&lt;/p&gt;

&lt;p&gt;Here, you can see a compiler error displayed next to the block that generates it. It&amp;rsquo;s not hooked up here, but we&amp;rsquo;ve shown previously how errors like this can be &lt;a href=&#34;http://incidentalcomplexity.com/2016/08/03/july/#error-handling&#34;&gt;fixed automatically&lt;/a&gt; with the click of a button. We&amp;rsquo;ll be incorporating more of those ideas in the next month.&lt;/p&gt;

&lt;h4 id=&#34;eve-on-the-web&#34;&gt;Eve on the Web&lt;/h4&gt;

&lt;p&gt;Another big development this month is a version of &lt;a href=&#34;https://github.com/witheve/Eve/tree/ts-merge&#34;&gt;Eve written in TypeScript&lt;/a&gt;. This has the notable advantage over the C/Lua version of being able to work on every platform, including Windows. Also, in this version we&amp;rsquo;ve started to add some debugging tools. Here&amp;rsquo;s an example of a performance report, which displays performance statistics for each block:&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;{{ site.url }}/images/perf.png&#34; alt=&#34;perf&#34; /&gt;&lt;/p&gt;

&lt;p&gt;We&amp;rsquo;ve also added some &lt;a href=&#34;https://github.com/witheve/Eve/tree/ts-merge/test&#34;&gt;testing facilities&lt;/a&gt; for language-level sanity checks:&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;{{ site.url }}/images/tests.png&#34; alt=&#34;testing&#34; /&gt;&lt;/p&gt;

&lt;p&gt;We&amp;rsquo;ll have a lot more to talk about on this front in a couple of weeks, so stay tuned.&lt;/p&gt;

&lt;h4 id=&#34;word-choice-adjustments&#34;&gt;Word Choice Adjustments&lt;/h4&gt;

&lt;p&gt;In August, we tentatively settled on the term &amp;ldquo;context&amp;rdquo; in place of &amp;ldquo;bag&amp;rdquo; to describe a collection of facts. After testing &amp;ldquo;context&amp;rdquo; for a couple weeks, we came to the conclusion that it just wasn&amp;rsquo;t the right word; it didn&amp;rsquo;t adequately describe the underlying concept, and thus it was misleading to some people. Instead, we&amp;rsquo;ve decided on &amp;ldquo;database&amp;rdquo;, which is a much more obvious and standard choice. We&amp;rsquo;ve found less confusion in using this word, so it seems like a win so far. Let us know what you think over at the &lt;a href=&#34;https://github.com/witheve/rfcs/issues/4&#34;&gt;syntax RFC&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;We also decided to rename &lt;code&gt;match&lt;/code&gt; to &lt;code&gt;search&lt;/code&gt;. Match was supposed to evoke the idea of pattern matching against data. This wasn&amp;rsquo;t clear to some people, and we&amp;rsquo;ve found that search is more intuitive.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;bag -&amp;gt; context -&amp;gt; database
match -&amp;gt; search
&lt;/code&gt;&lt;/pre&gt;

&lt;h4 id=&#34;changing-the-meaning-of&#34;&gt;Changing the meaning of &lt;code&gt;@&lt;/code&gt;&lt;/h4&gt;

&lt;p&gt;We&amp;rsquo;ve been using &lt;code&gt;@&lt;/code&gt; as a shortcut for the name attribute on records. For example, instead of writing &lt;code&gt;[name: &amp;quot;Corey&amp;quot;]&lt;/code&gt; you could write &lt;code&gt;[@Corey]&lt;/code&gt;. However, we’ve decided to remove this shortcut for several reasons. First, after writing more applications in Eve, we&amp;rsquo;ve found that the name attribute isn&amp;rsquo;t actually commonly used, so a shortcut doesn&amp;rsquo;t save that many characters. Furthermore, the tag shortcut ( &lt;code&gt;#&lt;/code&gt; ) can be used instead with the same effect. Finally, the semantics of &lt;code&gt;@&lt;/code&gt; in Eve are different from &lt;code&gt;@&lt;/code&gt; in other contexts; whereas &lt;code&gt;@&lt;/code&gt; resolves to a unique username on Twitter and Github, &lt;code&gt;@&lt;/code&gt; in Eve could match against multiple records. After all, name is just an attribute like any other.&lt;/p&gt;

&lt;p&gt;Therefore, we&amp;rsquo;re removing that sugar, and instead we&amp;rsquo;ll be using &lt;code&gt;@&lt;/code&gt; exclusively to reference databases. If you recall, databases are containers of facts. You can perform actions, like searching or binding, on one or more databases. With the removal of the name shortcut, we can now treat databases as first-class citizens of the Eve language:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;search
  db = if [#foo] then @db1
       else @db2

bind db
  [#bar]
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Here, we&amp;rsquo;re assigning a database to a variable based on a condition. If the condition is satisfied, &lt;code&gt;[#bar]&lt;/code&gt; is bound to &lt;code&gt;@db1&lt;/code&gt;. If the condition is not satisfied, &lt;code&gt;[#bar]&lt;/code&gt; is bound to &lt;code&gt;@db2&lt;/code&gt;.&lt;/p&gt;

&lt;h3 id=&#34;community&#34;&gt;Community&lt;/h3&gt;

&lt;p&gt;We&amp;rsquo;ve been a little quiet on the blog, but community efforts are still abound! Most of the community-focused work in September went toward building out our documentation and guides.&lt;/p&gt;

&lt;h4 id=&#34;handbook&#34;&gt;Handbook&lt;/h4&gt;

&lt;p&gt;&lt;img src=&#34;{{ site.url }}/images/docs.png&#34; alt=&#34;Eve Docs&#34; /&gt;&lt;/p&gt;

&lt;p&gt;We&amp;rsquo;ve put a lot of work into &lt;a href=&#34;https://github.com/witheve/docs&#34;&gt;witheve/docs&lt;/a&gt;. The handbook now has a lot more content, and can be &lt;a href=&#34;https://witheve.github.io/docs&#34;&gt;browsed on the web&lt;/a&gt;. In October, we&amp;rsquo;ll be making improvements with a focus on styling and completeness.&lt;/p&gt;

&lt;h4 id=&#34;quick-start-guide&#34;&gt;Quick Start Guide&lt;/h4&gt;

&lt;p&gt;The quick start guide is coming along nicely. It&amp;rsquo;s gone through a few iterations of user feedback, and we&amp;rsquo;d like to hear from a wider audience. The guide starts by showing you &amp;ldquo;Hello World!&amp;rdquo; in Eve, and from there slowly introduces language concepts until you have the tools to write a simple web app. We hope you&amp;rsquo;ll &lt;a href=&#34;https://witheve.github.io/docs/guides/quickstart/&#34;&gt;give it a read&lt;/a&gt; and let us know how it can be improved.&lt;/p&gt;

&lt;p&gt;That&amp;rsquo;s all for September. But as I said earlier, we have some exciting stuff in the pipeline for October. As always, we hope you give Eve a try and tell us what you think on the &lt;a href=&#34;https://groups.google.com/forum/#!forum/eve-talk&#34;&gt;mailing list&lt;/a&gt;!&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Dev Diary: January - February: GUIs, time, joins and aggregates</title>
      <link>http://docs.witheve.com/posts/2015-02-24-jan-feb/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://docs.witheve.com/posts/2015-02-24-jan-feb/</guid>
      <description>

&lt;p&gt;Better late than never.&lt;/p&gt;

&lt;h3 id=&#34;people&#34;&gt;People&lt;/h3&gt;

&lt;p&gt;Joshua Cole and Corey Montella joined us in the new year, bringing us up to a merry band of five.&lt;/p&gt;

&lt;h3 id=&#34;editor&#34;&gt;Editor&lt;/h3&gt;

&lt;p&gt;The goal for Eve is to have both textual and graphical code representations that stay in sync, so users can switch back and forth as they prefer. We&amp;rsquo;ve shown textual prototypes before - this is our first graphical prototype.&lt;/p&gt;

&lt;iframe width=&#34;600&#34; height=&#34;450&#34; src=&#34;https://www.youtube.com/embed/EfClpyk0jhQ&#34; frameborder=&#34;0&#34; allowfullscreen&gt;&lt;/iframe&gt;

&lt;p&gt;The core visual metaphor is tiles. Each tile represents a single chunk of code. Tiles for specialised domains like UI have their own specialised representations and editors. We intend to have grids of tiles for organising large projects - so a server project might have a network grid that contains tiles for some of the important views as well as UI tiles with graphs of network activity. This makes the editor almost into both a workspace and dashboard.&lt;/p&gt;

&lt;p&gt;The table editor is functionally complete - you can write any Eve program using it - but the UI for adding aggregates was designed for an older version of the language and can behave weirdly.&lt;/p&gt;

&lt;p&gt;The UI editor is still very experimental and has only been used to build simple forms. We still have to add support for dynamic contents (eg lists), styling and layout.&lt;/p&gt;

&lt;h3 id=&#34;aggregates&#34;&gt;Aggregates&lt;/h3&gt;

&lt;p&gt;Our current implementation of aggregates is very restricted. The aggregate functions can only return a single result and are limited to aggregating over the results of index lookups (eg &amp;lsquo;count the number of events which have id=&amp;ldquo;foo&amp;rdquo; and label=&amp;ldquo;click&amp;rdquo;&amp;rsquo;).&lt;/p&gt;

&lt;p&gt;We can fix these problems by adding first-class sets. We can restrict the usage of these sets so they never have to be fully materialised in the runtime - they only exist to make the semantics clear. They allows us to write complex aggregates using the same primitives we use for joins. They can also express negation, existentials and temporal queries like &amp;lsquo;find all consecutive events which are more than 5 minutes apart&amp;rsquo;.&lt;/p&gt;

&lt;p&gt;We are currently working through the details in an isolated implementation and intend to include it in the next iteration of the language. In the next post we will lay out the exact semantics and hopefully show some working examples.&lt;/p&gt;

&lt;h3 id=&#34;time&#34;&gt;Time&lt;/h3&gt;

&lt;p&gt;We experimented with first-class time intervals as described in &lt;a href=&#34;http://www.amazon.com/Time-Relational-Theory-Second-Management/dp/0128006315/ref=sr_1_1?ie=UTF8&amp;amp;qid=1424816894&amp;amp;sr=8-1&amp;amp;keywords=date+temporal+relational&#34;&gt;Time and Relational Algebra&lt;/a&gt;. Unfortunately this caused huge performance problems, partly due to the lack of incremental evaluation in the current runtime and partly because of the lack of custom value types in javascript.&lt;/p&gt;

&lt;p&gt;We also experimented with various different ways of representing time and change in Eve. Within the same program we can express timeless aggregates (like &amp;lsquo;x is the number of unique click events&amp;rsquo;) or more imperative updates (like &amp;lsquo;given a click at time t, the new x is the previous x plus 1&amp;rsquo;) without ever needing destructive change. It won&amp;rsquo;t be clear which patterns work best until the runtime is able to support much bigger programs.&lt;/p&gt;

&lt;h3 id=&#34;joins&#34;&gt;Joins&lt;/h3&gt;

&lt;p&gt;We implemented the &lt;a href=&#34;http://arxiv.org/abs/1404.0703&#34;&gt;Tetris algorithm&lt;/a&gt;. Along the way we came up with some nice tricks for packing bitwise tries efficiently (rather than one node per bit) and also found some optimisations for Tetris that avoid most of the overhead in the recursive search stage.&lt;/p&gt;

&lt;p&gt;Using dyadic gaps, as the paper suggests, is prohibitively expensive. The algorithm ends up generating thousands of gaps to join a dozen rows. The next experiment is to use arbitrarily sized gaps and treat resolution as a memoization problem inside the gap index rather than building it into the join algorithm itself.&lt;/p&gt;

&lt;p&gt;We &lt;em&gt;may&lt;/em&gt; also have a way to make Tetris work for arbitrary types (eg strings) as opposed to the fixed size bitstrings used in the paper.&lt;/p&gt;

&lt;p&gt;Tetris is still a good candidate for our join algorithm if we can work out these issues. Otherwise, some of the algorithms described in previous posts have produced reasonable results and are fine fallbacks.&lt;/p&gt;

&lt;h3 id=&#34;control&#34;&gt;Control&lt;/h3&gt;

&lt;p&gt;While running in the browser is a requirement for Eve, it&amp;rsquo;s always been clear that using javascript directly was not a long-term option. So many of our implementation problems come down to lack of control over data layout. For Eve we need to implement:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;New types (like intervals) - but there is a space overhead of 24 extra bytes per object&lt;/li&gt;
&lt;li&gt;Polymorphic comparisons - but dispatching on typeof is slow&lt;/li&gt;
&lt;li&gt;Cache-friendly indexes - but it&amp;rsquo;s hard to store multiple js objects sequentially in memory&lt;/li&gt;
&lt;li&gt;Radix tries - but converting strings to bytes is slow&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;We also want to be able to distribute native code for mobile devices and use real threads on servers. Lastly, there is some benefit to using reference-counting for the indexes so that we can avoid copying nodes when we know we have sole access.&lt;/p&gt;

&lt;p&gt;We ruled out C++ and D on aesthetic grounds - we have a preference for small, simple languages that we can understand completely.  Rust wins points for safety and abstraction but the toolchain is not nearly as mature and there are issues that currently prevent compiling with Emscripten. C gives us less support in the language but is much more future-proof at the moment.&lt;/p&gt;

&lt;h3 id=&#34;roadmap&#34;&gt;Roadmap&lt;/h3&gt;

&lt;p&gt;Josh is continuing to work on improving the new editor. Corey is working out the details of the new aggregate implementations. Chris and Jamie are away at &lt;a href=&#34;http://hackerschool.com/&#34;&gt;Hacker School&lt;/a&gt; where they will experiment with porting chunks of Eve to both C and Rust.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Eve Alpha v0.2.3</title>
      <link>http://docs.witheve.com/posts/2016-12-12-release-0.2.3/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://docs.witheve.com/posts/2016-12-12-release-0.2.3/</guid>
      <description>

&lt;p&gt;&lt;em&gt;(Eve is a new programming language, and this is our development blog. If you’re new to Eve, &lt;a href=&#34;http://play.witheve.com&#34;&gt;start here&lt;/a&gt;)&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;We released v0.2.2 just last week, and already we&amp;rsquo;re bumping the version number again, probably for the last time before we take a long-needed Holiday break. To recap, in v0.2.2 we added support for the Eve npm package, which adds the ability to use project workspaces, run stand-alone Eve apps, and run Eve in server execution mode. Read the &lt;a href=&#34;http://incidentalcomplexity.com/2016/12/06/november/&#34;&gt;November Dev Diary&lt;/a&gt; for a closer look at these recent changes.&lt;/p&gt;

&lt;h3 id=&#34;what-s-new-in-eve-alpha-v0-2-3&#34;&gt;What&amp;rsquo;s new in Eve Alpha v0.2.3?&lt;/h3&gt;

&lt;p&gt;Eve Alpha v0.2.3 includes these changes, and &lt;a href=&#34;https://github.com/witheve/Eve/releases/tag/v0.2.3&#34;&gt;more&lt;/a&gt;. Let&amp;rsquo;s see what&amp;rsquo;s new:&lt;/p&gt;

&lt;h4 id=&#34;share-eve-programs-with-gist&#34;&gt;Share Eve Programs with Gist&lt;/h4&gt;

&lt;p&gt;You can now share and load Eve programs with a link. There are two new icons in the editor at the top of the navigation pane: &amp;ldquo;Save to Gist&amp;rdquo; on the left, and &amp;ldquo;Load from Gist&amp;rdquo;.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;{{ site.url }}/images/saveload.PNG&#34; alt=&#34;new editor buttons&#34; /&gt;&lt;/p&gt;

&lt;p&gt;Clicking the &amp;ldquo;Save to Gist&amp;rdquo; button will upload your Eve program to a new &lt;a href=&#34;https://help.github.com/articles/about-gists/&#34;&gt;Gist&lt;/a&gt; and provide you with a link to it:&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;{{ site.url }}/images/savegist.gif&#34; alt=&#34;save to gist&#34; /&gt;&lt;/p&gt;

&lt;p&gt;You can copy this link and send it to a friend, who can then load your program using the &amp;ldquo;Load from Gist&amp;rdquo; button. Clicking this button will reveal an input box, into which you can paste Gist links:&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;{{ site.url }}/images/loadgist.gif&#34; alt=&#34;load from gist&#34; /&gt;&lt;/p&gt;

&lt;p&gt;When you load a Gist, you get a local copy of the linked Eve program. Any edits to this program will be made locally, and saved in your project workspace.&lt;/p&gt;

&lt;p&gt;A nice feature here is that you can share Eve programs with friends new to Eve using &lt;a href=&#34;http://play.witheve.com&#34;&gt;play.witheve.com&lt;/a&gt;. Save your Eve program to Gist as normal, then load it at play.witheve.com. Now copy the address, and send it to anyone! Anyone with the link can load your program and run it in the browser, without any setup.&lt;/p&gt;

&lt;p&gt;Note, that saving to Gist saves a snapshot of you code at the time the link is generated. If you update your code, you&amp;rsquo;ll need to generate a new link to reflect the changes.&lt;/p&gt;

&lt;h4 id=&#34;embed-css-directly-in-eve-programs&#34;&gt;Embed CSS Directly in Eve Programs&lt;/h4&gt;

&lt;p&gt;With a big thanks to the work of &lt;a href=&#34;https://github.com/witheve/eve/pull/580&#34;&gt;dwsmorris&lt;/a&gt;, you can embed CSS blocks into Eve documents. In the editor, you can create CSS blocks with the WYSIWYG toolbar:&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;{{ site.url }}/images/embeddedcss.gif&#34; alt=&#34;css blocks&#34; /&gt;&lt;/p&gt;

&lt;p&gt;In a text editor, you can specify a css block in the info string&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre&gt;&lt;code class=&#34;language-eve&#34; data-lang=&#34;eve&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;#&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;CSS&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;blocks&lt;/span&gt;

&lt;span class=&#34;kt&#34;&gt;Print&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;a&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;greeting&lt;/span&gt;

&lt;span class=&#34;err&#34;&gt;```&lt;/span&gt;
&lt;span class=&#34;kr&#34;&gt;commit&lt;/span&gt; &lt;span class=&#34;err&#34;&gt;@&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;browser&lt;/span&gt;
  &lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;#&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;div&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;class&lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;s&#34;&gt;&amp;quot;greeting&amp;quot;&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;text&lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;s&#34;&gt;&amp;quot;Hello World&amp;quot;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]&lt;/span&gt;
&lt;span class=&#34;err&#34;&gt;```&lt;/span&gt;

&lt;span class=&#34;nv&#34;&gt;style&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;the&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;greeting&lt;/span&gt;

&lt;span class=&#34;err&#34;&gt;```&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;css&lt;/span&gt;
&lt;span class=&#34;nf&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;greeting&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
  &lt;span class=&#34;nv&#34;&gt;color&lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;err&#34;&gt;#&lt;/span&gt;&lt;span class=&#34;kt&#34;&gt;FF0000&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;;&lt;/span&gt;  
&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;span class=&#34;err&#34;&gt;```&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;h4 id=&#34;standard-library&#34;&gt;Standard Library&lt;/h4&gt;

&lt;ul&gt;
&lt;li&gt;Added &lt;a href=&#34;http://docs.witheve.com/handbook/math/fix/&#34;&gt;&lt;code&gt;fix[]&lt;/code&gt;&lt;/a&gt; function (thanks &lt;a href=&#34;https://github.com/Cormac-Williams&#34;&gt;@Cormac-Williams&lt;/a&gt;!)&lt;/li&gt;
&lt;li&gt;Added &lt;a href=&#34;http://docs.witheve.com/handbook/strings/join/&#34;&gt;&lt;code&gt;join[]&lt;/code&gt;&lt;/a&gt; aggregate&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;contributors&#34;&gt;Contributors&lt;/h3&gt;

&lt;p&gt;Thanks to our contributors for this release!&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/asampal&#34;&gt;asampal&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/shamrin&#34;&gt;shamrin&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/bd82&#34;&gt;bd82&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/brainopia&#34;&gt;brainopia&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/Cormac-Williams&#34;&gt;Cormac-Williams&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/anfedorov&#34;&gt;anfedorov&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/dwsmorris&#34;&gt;dwsmorris&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/asolove&#34;&gt;asolove&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/frankier&#34;&gt;frankier&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/convolvatron&#34;&gt;convolvatron&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/pithub&#34;&gt;pithub&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/ericathegreat&#34;&gt;ericathegreat&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    <item>
      <title>Eve Alpha v0.3 preview 2</title>
      <link>http://docs.witheve.com/posts/2017-04-18-release-0.3p2/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://docs.witheve.com/posts/2017-04-18-release-0.3p2/</guid>
      <description>

&lt;p&gt;&lt;em&gt;(Eve is a new programming language, and this is our development blog. If you’re new to Eve, &lt;a href=&#34;http://play.witheve.com&#34;&gt;start here&lt;/a&gt;)&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;Now that we&amp;rsquo;ve got the v0.3 preview out the door, we&amp;rsquo;re ramping up to a more regular release schedule. In that spirit, today we&amp;rsquo;re releasing the second preview of Eve v0.3, which largely improves built in watchers, but contains some other goodies as well.&lt;/p&gt;

&lt;p&gt;If you want to try out this version, we have two routes:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;If you&amp;rsquo;re new to Eve and want to start a new Eve application, you should follow the instructions at &lt;a href=&#34;https://github.com/witheve/eve-starter&#34;&gt;eve-starter&lt;/a&gt;. This repository contains everything you need to start an Eve project, and some small examples demonstrating the JavaScript DSL.&lt;/li&gt;
&lt;li&gt;If you&amp;rsquo;d like to integrate Eve into an existing JavaScript project, download the npm package. You can find instructions &lt;a href=&#34;https://github.com/witheve/Eve#integrating-eve-into-an-existing-project&#34;&gt;here&lt;/a&gt;.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;If you&amp;rsquo;re used to running Eve, you may be looking for the editor and Eve syntax. We&amp;rsquo;re not finished working on those yet, so they are not included in this preview. If you&amp;rsquo;d like to use those, please stick with the v0.2.3 branch, and we&amp;rsquo;ll keep you updated as to when those make it into the main branch. There &lt;strong&gt;will&lt;/strong&gt; be breaking changes though, so any code you write now will have to be rewritten to a degree (for instance, some tags will be changing and databases are being removed from the language.)&lt;/p&gt;

&lt;h3 id=&#34;what-s-new&#34;&gt;What&amp;rsquo;s new?&lt;/h3&gt;

&lt;p&gt;Let&amp;rsquo;s take a look at some of the bigger improvements.&lt;/p&gt;

&lt;h4 id=&#34;embedding-eve-elements-in-your-app&#34;&gt;Embedding Eve Elements in Your App&lt;/h4&gt;

&lt;p&gt;You can now embed Eve rendered elements into your non-Eve application. This is accomplished with the &lt;code&gt;addExternalRoot(tag:string, element:HTMLElement)&lt;/code&gt; function, which registers an arbitrary root element to serve as parents to Eve-rendered elements. This block creates a record tagged &amp;ldquo;my-root&amp;rdquo; in Eve:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre&gt;&lt;code class=&#34;language-javascript&#34; data-lang=&#34;javascript&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&#34;kr&#34;&gt;import&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;Program&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;from&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;quot;witheve&amp;quot;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;

&lt;span class=&#34;kd&#34;&gt;let&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;program&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;new&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;Program&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;quot;my program&amp;quot;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;
&lt;span class=&#34;kd&#34;&gt;let&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;htmlWatcher&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;program&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;attach&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;quot;html&amp;quot;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;

&lt;span class=&#34;kd&#34;&gt;let&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;someElement&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;nb&#34;&gt;document&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;querySelector&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;quot;#eve-wrapper&amp;quot;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;
&lt;span class=&#34;nx&#34;&gt;htmlWatcher&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;addExternalRoot&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;quot;my-root&amp;quot;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;someElement&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Now you can access that element from within Eve, giving you the ability to use it as a parent for child elements rendered by Eve. This block searches for that record, and that adds a div with some text as a child:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre&gt;&lt;code class=&#34;language-javascript&#34; data-lang=&#34;javascript&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;program&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;bind&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;quot;render into #eve-wrapper&amp;quot;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;({&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;find&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;record&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;})&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
  &lt;span class=&#34;kd&#34;&gt;let&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;my_root&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;find&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;quot;my-root&amp;quot;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;
  &lt;span class=&#34;k&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;
    &lt;span class=&#34;nx&#34;&gt;my_root&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;add&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;quot;children&amp;quot;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;
      &lt;span class=&#34;nx&#34;&gt;record&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;quot;html/element&amp;quot;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;tagname&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;quot;div&amp;quot;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;text&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;quot;hello, world!&amp;quot;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;})&lt;/span&gt;
    &lt;span class=&#34;p&#34;&gt;])&lt;/span&gt;
  &lt;span class=&#34;p&#34;&gt;];&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;})&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;This scenario works well if you have an already existing application, and you&amp;rsquo;d like to use Eve to render certain elements.&lt;/p&gt;

&lt;h4 id=&#34;watchers&#34;&gt;Watchers&lt;/h4&gt;

&lt;p&gt;We&amp;rsquo;ve added and streamlined various watchers that interact with the browser. We&amp;rsquo;re now at the point where v0.3 is caught up to v0.2.x in terms of the available watchers. Additionally, we&amp;rsquo;ve added support for more DOM events and triggers in the HTML watcher:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;button&lt;/code&gt; attribute to all mouse events (values &lt;code&gt;left&lt;/code&gt;, &lt;code&gt;right&lt;/code&gt;, &lt;code&gt;middle&lt;/code&gt;, &lt;code&gt;4&lt;/code&gt;, and &lt;code&gt;5&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;double-click&lt;/code&gt;, &lt;code&gt;mouse-down&lt;/code&gt;, and &lt;code&gt;mouse-up&lt;/code&gt; events.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;html/listener/context-menu&lt;/code&gt; tag. If an element with this tag is right clicked, the default context menu will not be shown, allowing you to render your own. You can grab page-relative mouse position off of any of the mouse events as &lt;code&gt;page-x&lt;/code&gt; and &lt;code&gt;page-y&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;key-press&lt;/code&gt; event, with support for printable characters and the following control keys: &lt;code&gt;tab&lt;/code&gt;, &lt;code&gt;enter&lt;/code&gt;, &lt;code&gt;shift&lt;/code&gt;, &lt;code&gt;control&lt;/code&gt;, &lt;code&gt;alt&lt;/code&gt;, &lt;code&gt;escape&lt;/code&gt;, &lt;code&gt;left&lt;/code&gt;, &lt;code&gt;up&lt;/code&gt;, &lt;code&gt;right&lt;/code&gt;, &lt;code&gt;down&lt;/code&gt;, and &lt;code&gt;meta&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;focus&lt;/code&gt; and &lt;code&gt;blur&lt;/code&gt; events.&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&#34;standard-library&#34;&gt;Standard Library&lt;/h4&gt;

&lt;p&gt;The first v0.3 preview revamped the function definition interface, but still had some limitations. Now you can create expressions with multiple outputs, so we are in a position to bring v0.3 back to parity with v0.2.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Add &lt;a href=&#34;https://github.com/witheve/Eve/pull/823/commits/58af002ec4c3807b0a91e3ee148e6f7a5359387a&#34;&gt;&lt;code&gt;string.codepoint_length(text:string)&lt;/code&gt;&lt;/a&gt; function.&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    <item>
      <title>Eve Dev Diary (April 2016)</title>
      <link>http://docs.witheve.com/posts/2016-06-30-apr/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://docs.witheve.com/posts/2016-06-30-apr/</guid>
      <description>

&lt;h3 id=&#34;ui&#34;&gt;UI&lt;/h3&gt;

&lt;p&gt;In March we revisited &lt;a href=&#34;http://incidentalcomplexity.com/2016/06/03/oct-nov/&#34;&gt;GridEve&lt;/a&gt;, adapting it to fit more in line with the ethos of Eve; GridEve had a runtime based on data-flow, instead of the relational model we ultimately want. What we liked most about GridEve was the immediate usefulness of the grid model, so we decided to marry that with a relational engine in a new project: WikiGrid. In the last update, we looked at some interaction-level details of WikiGrid. Now, I&amp;rsquo;ll show some of our ideas about how the relational model can fit in a grid world.&lt;/p&gt;

&lt;h4 id=&#34;querying-with-grids&#34;&gt;Querying with Grids&lt;/h4&gt;

&lt;p&gt;One obvious possibility is just to have relational functions and to allow the user to write them in cells. But that doesn&amp;rsquo;t really take advantage of the relational nature of the Eve platform &amp;ndash; you could do this in any language. Eventually, we stumbled upon a really simple yet absolutely cool idea: give semantic meaning to cell adjacency. Consider this:&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;{{ site.url }}/images/wikigrid2.png&#34; alt=&#34;WikiGrid&#34; /&gt;&lt;/p&gt;

&lt;p&gt;Here, the cell &lt;code&gt;person&lt;/code&gt; means &amp;ldquo;select all the entities tagged person&amp;rdquo;. The adjacent cell &lt;code&gt;age&lt;/code&gt; means &amp;ldquo;select the attribute age for the adjacent collection&amp;rdquo; i.e. &lt;code&gt;person.age&lt;/code&gt;, which returns the set of all ages of &amp;ldquo;person&amp;rdquo;s in the system.&lt;/p&gt;

&lt;p&gt;Building under that, we use a reserved word &lt;code&gt;without&lt;/code&gt;, an alias for the anti-join operator. The adjacent blocks &lt;code&gt;width&lt;/code&gt; and &lt;code&gt;height&lt;/code&gt; mean &lt;code&gt;person.width&lt;/code&gt; and &lt;code&gt;person.height&lt;/code&gt;. So the overall query will select all entities with a &amp;ldquo;person&amp;rdquo; tag and an attribute age, that do not have width or height attributes.&lt;/p&gt;

&lt;p&gt;In textual form, this would be written:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;(query [age]
  (fact name :tag &amp;quot;person&amp;quot; :age)
  (not
    (fact name :tag &amp;quot;person&amp;quot; :width :height))
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This was very exciting for us, because you could basically write out a complicated query with no syntax. This was by far our fastest way to write a query yet. Here&amp;rsquo;s what writing one of these looks like in WikiGrid:&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;{{ site.url }}/images/wikigrid4.gif&#34; alt=&#34;WikiGrid&#34; /&gt;&lt;/p&gt;

&lt;p&gt;Here, we mark off a 5x4 area as a macro cell. Then we name the macro cell &amp;ldquo;test&amp;rdquo; and give it a &amp;ldquo;Formula Grid&amp;rdquo; type. If you look closely at the autocomplete that pops up, you&amp;rsquo;ll see the cell can take on many types: table, code, image, text, chart, drawing, etc. Most of these weren&amp;rsquo;t wired up yet, but it illustrated the idea that cells can contain anything.&lt;/p&gt;

&lt;p&gt;So let&amp;rsquo;s put it all together and see how it works when it&amp;rsquo;s hooked up to an evaluator. The runtime in this example was our new Clojure runtime from last month.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;{{ site.url }}/images/wikigrid5.gif&#34; alt=&#34;WikiGrid&#34; /&gt;&lt;/p&gt;

&lt;p&gt;We start out in a grid and name it &amp;ldquo;Chris&amp;rdquo; by adding an attribute cell. Each grid represents a single entity, so any attributes added to the grid are attached to that entity. Grids start out nameless, so giving it a name provides a handle to the grid. We then add two more attributes: an &lt;code&gt;age&lt;/code&gt; and &lt;code&gt;tag&lt;/code&gt;. The &lt;code&gt;tag&lt;/code&gt; attribute is a convention used to group similar entities. By adding the tag &amp;ldquo;person&amp;rdquo;, we are now able to talk about collections of &amp;ldquo;person&amp;rdquo;s by joining on that tag.&lt;/p&gt;

&lt;p&gt;Next, we create a formula grid, and we query for &lt;code&gt;person.age&lt;/code&gt;. The result of the query shows up in the bottom half of the formula grid as we type. Chris is the only result, since he&amp;rsquo;s the only entity in the system, so let&amp;rsquo;s add some more.&lt;/p&gt;

&lt;p&gt;Chris has a friend named Rob, so we add him as a new entity under &lt;code&gt;chris.friend&lt;/code&gt;. We then navigate to Rob’s grid, which was automatically created when we added Rob as a friend of Chris. Now we just add &lt;code&gt;rob.age&lt;/code&gt; and &lt;code&gt;rob.tag&lt;/code&gt; and he shows up in the formula grid. We can do the same thing for Chris&amp;rsquo; other friend Bob, and we see he is added as well.&lt;/p&gt;

&lt;p&gt;This is a relatively simple example, but we can write arbitrarily complex queries this way:&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;{{ site.url }}/images/wikigrid3.png&#34; alt=&#34;WikiGrid&#34; /&gt;&lt;/p&gt;

&lt;p&gt;This query draws the name and age of a person in HMTL. The name is in one div, styled red, while the age is in another div, styled blue.&lt;/p&gt;

&lt;h3 id=&#34;platform-work&#34;&gt;Platform Work&lt;/h3&gt;

&lt;h4 id=&#34;language&#34;&gt;Language&lt;/h4&gt;

&lt;p&gt;We added more language features to the runtime, including &lt;code&gt;choose&lt;/code&gt;, &lt;code&gt;not&lt;/code&gt;, and various aggregates.&lt;/p&gt;

&lt;h5 id=&#34;choose&#34;&gt;Choose&lt;/h5&gt;

&lt;p&gt;The &lt;code&gt;choose&lt;/code&gt; statement works kind of like an &lt;code&gt;if&lt;/code&gt; statement in other languages; it has multiple arms, one of which is evaluated based on a condition. For us, each arm is its own sub-query. The condition for evaluation is whether or not there are any results in the sub-query. The first arm of the &lt;code&gt;choose&lt;/code&gt; with a result is the one that gets evaluated, so this is one case where order does matter in Eve. Take a look at this example:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;(query [grade score]
  (fact name :score)
  (choose [grade score]
    (query
      (&amp;gt;= score 90)
      (= grade &amp;quot;A&amp;quot;))
    (query
      (&amp;gt;= score 80)
      (= grade &amp;quot;B&amp;quot;))
    (query
      (&amp;gt;= score 70)
      (= grade &amp;quot;C&amp;quot;))
    (query
      (&amp;gt;= score 60)
      (= grade &amp;quot;D&amp;quot;))
    (query
      (&amp;gt; score 0)
      (= grade &amp;quot;F&amp;quot;))))
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Here, we are assigning a letter grade given a numerical score. The &lt;code&gt;choose&lt;/code&gt; statement itself has its own &lt;a href=&#34;http://incidentalcomplexity.com/2016/06/10/jan-feb/&#34;&gt;projection&lt;/a&gt;, so you can decide which variables internal to the &lt;code&gt;choose&lt;/code&gt; are accessible in the parent query.&lt;/p&gt;

&lt;h5 id=&#34;not&#34;&gt;Not&lt;/h5&gt;

&lt;p&gt;The &lt;code&gt;not&lt;/code&gt; statement is an anti-join operator. Its body is a query, and any results within are excluded from the parent query. For instance:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;(query [names]
  (fact names :tag &amp;quot;person&amp;quot;)
  (not
    (fact names :tag &amp;quot;employee&amp;quot;)))
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;will return all of the entities tagged &amp;ldquo;person&amp;rdquo; that are not also tagged &amp;ldquo;employee&amp;rdquo;.&lt;/p&gt;

&lt;h5 id=&#34;aggregates&#34;&gt;Aggregates&lt;/h5&gt;

&lt;p&gt;We got some aggregates working for this version as well. Aggregates work just like regular functions, except they can change the cardinality of the output. So &lt;code&gt;sum&lt;/code&gt; takes in a set of cardinality N and returns a set of cardinality 1. You have to keep this in mind, or your results might not be what you expect (something we didn’t really like. We later found better semantics for aggregates, which I’ll talk about in a future post). Here is an example of &lt;code&gt;sum&lt;/code&gt; in practice:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;(query [sum-result]
  (fact e :score)
  (= sum-result (sum score)))
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This will store the sum of all the scores in sum-result.&lt;/p&gt;

&lt;h4 id=&#34;repl-github-https-github-com-witheve-eve-experiments-tree-e73b18d8111d5ddb73427bcb00f0501fdc9b8f2f&#34;&gt;REPL (&lt;a href=&#34;https://github.com/witheve/eve-experiments/tree/e73b18d8111d5ddb73427bcb00f0501fdc9b8f2f&#34;&gt;github&lt;/a&gt;)&lt;/h4&gt;

&lt;p&gt;The REPL received a visual overhaul and several additional features. First, let&amp;rsquo;s take a look at the new layout.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;{{ site.url }}/images/repl4.png&#34; alt=&#34;REPL&#34; /&gt;&lt;/p&gt;

&lt;p&gt;You can immediately see some new features here. First, we&amp;rsquo;ve changed the layout a little. We have a toolbar on the left, and the REPL &amp;ldquo;cards&amp;rdquo; on the right. We have a button to get another column of cards, which gives us a restricted grid layout.&lt;/p&gt;

&lt;p&gt;While the REPL is still written in Typescript, we&amp;rsquo;ve bootstrapped several elements. On the side, we have a space to see all the entities and tags in the system. If we click on an entity, we can see its attributes table. If we click on a tag, we can see a list of all entities with that tag (you can see an example of this in the GIF below).&lt;/p&gt;

&lt;p&gt;These are supported by two queries that listen for entities and tags:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;// get all entities that are not system entities
(query [entities attributes values]
  (fact-btu entities attributes values)
    (not
      (fact entities :tag &amp;quot;system&amp;quot;)))
      
// get all tags that are not also system tags
(query [tag entity],
  (fact entity :tag tag)
    (not
      (fact entity :tag &amp;quot;system&amp;quot;)))
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The client leaves these queries open, so it continuously receives updates as new entities and tags are added.&lt;/p&gt;

&lt;p&gt;We also added various views to the output. The view defaults to the results table, which displays the current state of the results. You can also see this History, which logs the incremental changes to the table. This is just a local history according to the client, but eventually this will be a history according to the server. This will allow features like the ability to see the state of the table at an arbitrary time.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;{{ site.url }}/images/repl5.png&#34; alt=&#34;REPL&#34; /&gt;&lt;/p&gt;

&lt;p&gt;The info tab displays information from the compiler about the query for debugging purposes. So far, we display the intermediate expansion of the query, as well as Eve bytecode.&lt;/p&gt;

&lt;p&gt;We also added a chat system. This required some notion of a user, so we added something quick and dirty. If you try to use the REPL yourself, the first thing you&amp;rsquo;ll see is a login screen. When you submit a username and password here (use eve/eve), we compare it against the users stored in the Eve DB (obviously this is not secure at all, it was just a proof of concept).&lt;/p&gt;

&lt;p&gt;Now that you&amp;rsquo;ve logged in, you can send and receive messages:&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;{{ site.url }}/images/repl1.gif&#34; alt=&#34;REPL&#34; /&gt;&lt;/p&gt;

&lt;p&gt;This whole process is also supported by the Eve backend. When you send a message, we add a new fact into the database, containing the message text, as well as your user ID and the local machine timestamp:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;(query []
  (insert-fact! &amp;quot;${uuid()}&amp;quot; :tag &amp;quot;system&amp;quot;
                            :tag &amp;quot;repl-chat&amp;quot;
                            :message &amp;quot;${message}&amp;quot;
                            :user &amp;quot;${repl.user.id}&amp;quot;
                            :timestamp &amp;quot;${t}&amp;quot;))
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Every other client is listening for new messages:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;(query [id user message time]
  (fact id :tag &amp;quot;repl-chat&amp;quot;
           :message message
           :user user
           :timestamp time))
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Right now we still have more work to do to draw UI, so the messages are displayed using Typescript. But soon we&amp;rsquo;ll be able to bootstrap this whole process (actually, if you want to see what a full chat component looks like in our latest sytanx, you can check it out &lt;a href=&#34;https://github.com/witheve/lueve/blob/master/examples/chat.eve&#34;&gt;here&lt;/a&gt;. This version even has the ability to support multiple channels.).&lt;/p&gt;

&lt;h5 id=&#34;build-instructions&#34;&gt;Build instructions:&lt;/h5&gt;

&lt;p&gt;If you&amp;rsquo;d like to try out the REPL yourself, it&amp;rsquo;s pretty easy to get running. We&amp;rsquo;ve tested this under Windows 10 and OSX El Capitan, but I don&amp;rsquo;t see any reason it shouldn&amp;rsquo;t run under Linux.&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;First, you&amp;rsquo;ll need the following dependencies: Node.js, Clojure, &lt;a href=&#34;http://leiningen.org/&#34;&gt;Leinengen&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;Next , clone the Eve repo from &lt;a href=&#34;https://github.com/witheve/eve-experiments/tree/e73b18d8111d5ddb73427bcb00f0501fdc9b8f2f&#34;&gt;this commit&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;Then cd into where you cloned Eve. Download node dependencies and compile the REPL:&lt;/li&gt;
&lt;/ol&gt;

&lt;pre&gt;&lt;code&gt;&amp;gt; npm install
&amp;gt; npm run dev
&lt;/code&gt;&lt;/pre&gt;

&lt;ol&gt;
&lt;li&gt;When the REPL is finished building, you can kill that process and cd into the &lt;code&gt;/server&lt;/code&gt; directory. Then, all you need to do is:&lt;/li&gt;
&lt;/ol&gt;

&lt;pre&gt;&lt;code&gt;&amp;gt; lein run
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This will compile and run the server. When it&amp;rsquo;s finished, you&amp;rsquo;ll have a REPL hosted at &lt;code&gt;http://localhost:8081/repl&lt;/code&gt;. The REPL was developed in Chrome, on Windows, but I&amp;rsquo;ve also verified it working on Firefox and Edge.&lt;/p&gt;

&lt;h4 id=&#34;ui-drawing&#34;&gt;UI Drawing&lt;/h4&gt;

&lt;p&gt;We also added the capability to specify UI with our syntax, obviating the need for HTML or CSS. We are interested in writing useful tools for ourselves in Eve, so we decided to write a little CI report generator.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;(define-ui ci-run-result
  (fact test-run :tag &amp;quot;testrun&amp;quot; :number pr-number :branch :user :title :text description :additions :deletions)
  (fact test-result :tag &amp;quot;testresult&amp;quot; :run test-run :test :result)
  (fact-btu test-result &amp;quot;result&amp;quot; :tick)
  (= test-order (+ 100 (sort tick)))
  (= delta-text (str &amp;quot;(+&amp;quot; additions &amp;quot; / -&amp;quot; deletions &amp;quot;)&amp;quot;))
  (= pr (str &amp;quot;#&amp;quot; pr-number))
  (= url (str &amp;quot;https://github.com/witheve/eve-experiments/pull/&amp;quot; pr-number))
  (= branch-url (str &amp;quot;https://github.com/witheve/eve-experiments/tree/&amp;quot; branch))
  (= user-url (str &amp;quot;https://github.com/&amp;quot; user))
  (= test-class (str &amp;quot;test &amp;quot; result))

  (ui [title pr pr-number url user user-url delta-text branch branch-url description]
      (div :id run-tile :parent &amp;quot;root&amp;quot; :ix pr-number :class &amp;quot;test-run&amp;quot;)
      (h3 :id header :parent run-tile :ix 1)
        (div :parent header :ix 0 :class &amp;quot;spacer&amp;quot; :text title)
        (a :parent header :ix 1 :text pr :href url)
      (div :id user-tile :parent run-tile :ix 2 :class &amp;quot;run-info&amp;quot;)
        (div :parent user-tile :ix 0 :text delta-text)
        (div :parent user-tile :ix 1 :text &amp;quot;in&amp;quot;)
        (a :parent user-tile :ix 2 :text branch :href branch-url)
        (div :parent user-tile :ix 3 :text &amp;quot;by&amp;quot;)
        (a :parent user-tile :ix 4 :class &amp;quot;user&amp;quot; :text user :href user-url)
      (blockquote :parent run-tile :ix 3 :class &amp;quot;description&amp;quot; :text description))

  (ui [run-tile test test-class test-order]
      (div :id test-tile :parent run-tile :ix test-order :class test-class)
      (div :parent test-tile :ix 0 :text test)))
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;It&amp;rsquo;s pretty simple when you break it down. You can think of the code in two phases. The first phase, we collect all the information necessary to render the cards:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;  // Get the test runs and their results. Joins via test-run
  (fact test-run :tag &amp;quot;testrun&amp;quot; :number pr-number :branch :user :title :text description :additions :deletions)
  (fact test-result :tag &amp;quot;testresult&amp;quot; :run test-run :test :result)

  // Sort results by tick order
  (fact-btu test-result &amp;quot;result&amp;quot; :tick)

  // Format some strings
  (= test-order (+ 100 (sort tick)))
  (= delta-text (str &amp;quot;(+&amp;quot; additions &amp;quot; / -&amp;quot; deletions &amp;quot;)&amp;quot;))
  (= pr (str &amp;quot;#&amp;quot; pr-number))
  (= url (str &amp;quot;https://github.com/witheve/eve-experiments/pull/&amp;quot; pr-number))
  (= branch-url (str &amp;quot;https://github.com/witheve/eve-experiments/tree/&amp;quot; branch))
  (= user-url (str &amp;quot;https://github.com/&amp;quot; user))
  (= test-class (str &amp;quot;test &amp;quot; result))
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;In the second phase, we take the data and display them:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;// Draws a commit card. This card is repeated once for every commit
(ui [title pr pr-number url user user-url delta-text branch branch-url description]

    // Attaches the card to the DOM root
    (div :id run-tile :parent &amp;quot;root&amp;quot; :ix pr-number :class &amp;quot;test-run&amp;quot;)
    // Draws the header
    (h3 :id header :parent run-tile :ix 1)
      (div :parent header :ix 0 :class &amp;quot;spacer&amp;quot; :text title)
      (a :parent header :ix 1 :text pr :href url)

    // Draws the line &amp;quot;(+{adds}/-{removes}) in {branch} by {user}&amp;quot;
    (div :id user-tile :parent run-tile :ix 2 :class &amp;quot;run-info&amp;quot;)
      (div :parent user-tile :ix 0 :text delta-text)
      (div :parent user-tile :ix 1 :text &amp;quot;in&amp;quot;)
      (a :parent user-tile :ix 2 :text branch :href branch-url)
      (div :parent user-tile :ix 3 :text &amp;quot;by&amp;quot;)
      (a :parent user-tile :ix 4 :class &amp;quot;user&amp;quot; :text user :href user-url)
    // Draws the commit message
    (blockquote :parent run-tile :ix 3 :class &amp;quot;description&amp;quot; :text description))

// Draws the test results. This block is repeated once for every test
(ui [run-tile test test-class test-order]
    (div :id test-tile :parent run-tile :ix test-order :class test-class)
    (div :parent test-tile :ix 0 :text test)))
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Here is the result:&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;{{ site.url }}/images/evel-ci.png&#34; alt=&#34;Eve CI&#34; /&gt;&lt;/p&gt;

&lt;p&gt;And we did all this in Eve without having to write separate HTML! The result is completely live, so any new commits are displayed as soon as the tests complete.&lt;/p&gt;

&lt;p&gt;The two-phase nature of this query (get some data -&amp;gt; do something with that data) is a general pattern we&amp;rsquo;ve found very useful for both reading and writing Eve programs. In newer versions of the Eve syntax, we make this pattern more explicit.&lt;/p&gt;

&lt;h3 id=&#34;moving-forward&#34;&gt;Moving Forward&lt;/h3&gt;

&lt;p&gt;This is the last post in our backlog of development diaries. Moving forward, we&amp;rsquo;ll keep a monthly cadence of dev diaries starting July. To cover our work in May and June, we have some special news, which we will be talking about shortly. As time goes by, and as Eve grows, I hope to keep the blog updated with more features like example Eve programs, community spotlights, tutorials, etc. So stay tuned!&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>